

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Oct 18 22:05:50 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2,group=3
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text4,local,class=CODE,merge=1,delta=2,group=3
    16                           	psect	text5,local,class=CODE,merge=1,delta=2,group=3
    17                           	psect	text6,local,class=CODE,merge=1,delta=2,group=3
    18                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2,group=3
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    29                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    30                           	dabs	1,0x7E,2
    31     0000                     
    32                           ; Generated 22/03/2023 GMT
    33                           ; 
    34                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution. Publication is not required when
    48                           ;        this file is used in an embedded application.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC16F877A Definitions
    64                           ; 
    65                           ; SFR Addresses
    66     0000                     	;# 
    67     0001                     	;# 
    68     0002                     	;# 
    69     0003                     	;# 
    70     0004                     	;# 
    71     0005                     	;# 
    72     0006                     	;# 
    73     0007                     	;# 
    74     0008                     	;# 
    75     0009                     	;# 
    76     000A                     	;# 
    77     000B                     	;# 
    78     000C                     	;# 
    79     000D                     	;# 
    80     000E                     	;# 
    81     000E                     	;# 
    82     000F                     	;# 
    83     0010                     	;# 
    84     0011                     	;# 
    85     0012                     	;# 
    86     0013                     	;# 
    87     0014                     	;# 
    88     0015                     	;# 
    89     0015                     	;# 
    90     0016                     	;# 
    91     0017                     	;# 
    92     0018                     	;# 
    93     0019                     	;# 
    94     001A                     	;# 
    95     001B                     	;# 
    96     001B                     	;# 
    97     001C                     	;# 
    98     001D                     	;# 
    99     001E                     	;# 
   100     001F                     	;# 
   101     0081                     	;# 
   102     0085                     	;# 
   103     0086                     	;# 
   104     0087                     	;# 
   105     0088                     	;# 
   106     0089                     	;# 
   107     008C                     	;# 
   108     008D                     	;# 
   109     008E                     	;# 
   110     0091                     	;# 
   111     0092                     	;# 
   112     0093                     	;# 
   113     0094                     	;# 
   114     0098                     	;# 
   115     0099                     	;# 
   116     009C                     	;# 
   117     009D                     	;# 
   118     009E                     	;# 
   119     009F                     	;# 
   120     010C                     	;# 
   121     010D                     	;# 
   122     010E                     	;# 
   123     010F                     	;# 
   124     018C                     	;# 
   125     018D                     	;# 
   126     0000                     	;# 
   127     0001                     	;# 
   128     0002                     	;# 
   129     0003                     	;# 
   130     0004                     	;# 
   131     0005                     	;# 
   132     0006                     	;# 
   133     0007                     	;# 
   134     0008                     	;# 
   135     0009                     	;# 
   136     000A                     	;# 
   137     000B                     	;# 
   138     000C                     	;# 
   139     000D                     	;# 
   140     000E                     	;# 
   141     000E                     	;# 
   142     000F                     	;# 
   143     0010                     	;# 
   144     0011                     	;# 
   145     0012                     	;# 
   146     0013                     	;# 
   147     0014                     	;# 
   148     0015                     	;# 
   149     0015                     	;# 
   150     0016                     	;# 
   151     0017                     	;# 
   152     0018                     	;# 
   153     0019                     	;# 
   154     001A                     	;# 
   155     001B                     	;# 
   156     001B                     	;# 
   157     001C                     	;# 
   158     001D                     	;# 
   159     001E                     	;# 
   160     001F                     	;# 
   161     0081                     	;# 
   162     0085                     	;# 
   163     0086                     	;# 
   164     0087                     	;# 
   165     0088                     	;# 
   166     0089                     	;# 
   167     008C                     	;# 
   168     008D                     	;# 
   169     008E                     	;# 
   170     0091                     	;# 
   171     0092                     	;# 
   172     0093                     	;# 
   173     0094                     	;# 
   174     0098                     	;# 
   175     0099                     	;# 
   176     009C                     	;# 
   177     009D                     	;# 
   178     009E                     	;# 
   179     009F                     	;# 
   180     010C                     	;# 
   181     010D                     	;# 
   182     010E                     	;# 
   183     010F                     	;# 
   184     018C                     	;# 
   185     018D                     	;# 
   186     001E                     _ADRESH	set	30
   187     001F                     _ADCON0bits	set	31
   188     0019                     _TXREG	set	25
   189     0018                     _RCSTAbits	set	24
   190     0064                     _TXIF	set	100
   191     009E                     _ADRESL	set	158
   192     009F                     _ADCON1bits	set	159
   193     0099                     _SPBRG	set	153
   194     0098                     _TXSTAbits	set	152
   195                           
   196                           	psect	strings
   197     0003                     __pstrings:
   198     0003                     stringtab:
   199     0003                     __stringtab:
   200     0003                     stringcode:	
   201                           ;	String table - string pointers are 1 byte each
   202                           
   203     0003                     stringdir:
   204     0003  3000               	movlw	high stringdir
   205     0004  008A               	movwf	10
   206     0005  0804               	movf	4,w
   207     0006  0A84               	incf	4,f
   208     0007  0782               	addwf	2,f
   209     0008                     __stringbase:
   210     0008  3400               	retlw	0
   211     0009                     __end_of__stringtab:
   212     0009                     STR_1:
   213     0009  3453               	retlw	83	;'S'
   214     000A  3465               	retlw	101	;'e'
   215     000B  346E               	retlw	110	;'n'
   216     000C  3473               	retlw	115	;'s'
   217     000D  346F               	retlw	111	;'o'
   218     000E  3472               	retlw	114	;'r'
   219     000F  3420               	retlw	32	;' '
   220     0010  3456               	retlw	86	;'V'
   221     0011  3461               	retlw	97	;'a'
   222     0012  346C               	retlw	108	;'l'
   223     0013  3475               	retlw	117	;'u'
   224     0014  3465               	retlw	101	;'e'
   225     0015  3420               	retlw	32	;' '
   226     0016  343D               	retlw	61	;'='
   227     0017  3420               	retlw	32	;' '
   228     0018  3425               	retlw	37	;'%'
   229     0019  3464               	retlw	100	;'d'
   230     001A  3400               	retlw	0
   231                           
   232                           	psect	cinit
   233     07EB                     start_initialization:	
   234                           ; #config settings
   235                           
   236     07EB                     __initialization:
   237                           
   238                           ; Clear objects allocated to BANK0
   239     07EB  1383               	bcf	3,7	;select IRP bank0
   240     07EC  3020               	movlw	low __pbssBANK0
   241     07ED  0084               	movwf	4
   242     07EE  3045               	movlw	low (__pbssBANK0+37)
   243     07EF  120A  118A  23FB  120A  118A  	fcall	clear_ram0
   244                           
   245                           ; Clear objects allocated to BANK1
   246     07F4  30A0               	movlw	low __pbssBANK1
   247     07F5  0084               	movwf	4
   248     07F6  30D2               	movlw	low (__pbssBANK1+50)
   249     07F7  120A  118A  23FB  120A  118A  	fcall	clear_ram0
   250     07FC                     end_of_initialization:	
   251                           ;End of C runtime variable initialization code
   252                           
   253     07FC                     __end_of__initialization:
   254     07FC  0183               	clrf	3
   255     07FD  120A  118A  2D02   	ljmp	_main	;jump to C main() function
   256                           
   257                           	psect	bssBANK0
   258     0020                     __pbssBANK0:
   259     0020                     _dbuf:
   260     0020                     	ds	32
   261     0040                     _width:
   262     0040                     	ds	2
   263     0042                     _prec:
   264     0042                     	ds	2
   265     0044                     _flags:
   266     0044                     	ds	1
   267                           
   268                           	psect	bssBANK1
   269     00A0                     __pbssBANK1:
   270     00A0                     _buffer:
   271     00A0                     	ds	50
   272                           
   273                           	psect	clrtext
   274     03FB                     clear_ram0:	
   275                           ;	Called with FSR containing the base address, and
   276                           ;	W with the last address+1
   277                           
   278     03FB  0064               	clrwdt	;clear the watchdog before getting into this loop
   279     03FC                     clrloop0:
   280     03FC  0180               	clrf	0	;clear RAM location pointed to by FSR
   281     03FD  0A84               	incf	4,f	;increment pointer
   282     03FE  0604               	xorwf	4,w	;XOR with final address
   283     03FF  1903               	btfsc	3,2	;have we reached the end yet?
   284     0400  3400               	retlw	0	;all done for this memory range, return
   285     0401  0604               	xorwf	4,w	;XOR again to restore value
   286     0402  2BFC               	goto	clrloop0	;do the next byte
   287                           
   288                           	psect	cstackCOMMON
   289     0070                     __pcstackCOMMON:
   290     0070                     ?_putch:
   291     0070                     ??_putch:	
   292                           ; 1 bytes @ 0x0
   293                           
   294     0070                     ?___init_usart:	
   295                           ; 1 bytes @ 0x0
   296                           
   297     0070                     ??___init_usart:	
   298                           ; 1 bytes @ 0x0
   299                           
   300     0070                     ?___write_char:	
   301                           ; 1 bytes @ 0x0
   302                           
   303     0070                     ??___write_char:	
   304                           ; 1 bytes @ 0x0
   305                           
   306     0070                     ?___usart_write_ln:	
   307                           ; 1 bytes @ 0x0
   308                           
   309     0070                     ?___init_adc:	
   310                           ; 1 bytes @ 0x0
   311                           
   312     0070                     ??___init_adc:	
   313                           ; 1 bytes @ 0x0
   314                           
   315     0070                     ?_main:	
   316                           ; 1 bytes @ 0x0
   317                           
   318     0070                     ?_strlen:	
   319                           ; 1 bytes @ 0x0
   320                           
   321     0070                     ?_fputc:	
   322                           ; 2 bytes @ 0x0
   323                           
   324     0070                     ?___adc_read:	
   325                           ; 2 bytes @ 0x0
   326                           
   327     0070                     ?___awdiv:	
   328                           ; 2 bytes @ 0x0
   329                           
   330     0070                     ?___awmod:	
   331                           ; 2 bytes @ 0x0
   332                           
   333     0070                     ?___aldiv:	
   334                           ; 2 bytes @ 0x0
   335                           
   336     0070                     ___write_char@c:	
   337                           ; 4 bytes @ 0x0
   338                           
   339     0070                     putch@c:	
   340                           ; 1 bytes @ 0x0
   341                           
   342     0070                     ___adc_read@adc_channel:	
   343                           ; 1 bytes @ 0x0
   344                           
   345     0070                     ___awdiv@divisor:	
   346                           ; 2 bytes @ 0x0
   347                           
   348     0070                     ___awmod@divisor:	
   349                           ; 2 bytes @ 0x0
   350                           
   351     0070                     fputc@c:	
   352                           ; 2 bytes @ 0x0
   353                           
   354     0070                     ___aldiv@divisor:	
   355                           ; 2 bytes @ 0x0
   356                           
   357                           
   358                           ; 4 bytes @ 0x0
   359     0070                     	ds	2
   360     0072                     ??_strlen:
   361     0072                     ??___adc_read:	
   362                           ; 1 bytes @ 0x2
   363                           
   364     0072                     fputc@fp:	
   365                           ; 1 bytes @ 0x2
   366                           
   367     0072                     ___awdiv@dividend:	
   368                           ; 1 bytes @ 0x2
   369                           
   370     0072                     ___awmod@dividend:	
   371                           ; 2 bytes @ 0x2
   372                           
   373                           
   374                           ; 2 bytes @ 0x2
   375     0072                     	ds	1
   376     0073                     ??_fputc:
   377     0073                     strlen@a:	
   378                           ; 1 bytes @ 0x3
   379                           
   380                           
   381                           ; 1 bytes @ 0x3
   382     0073                     	ds	1
   383     0074                     ??___awdiv:
   384     0074                     ??___awmod:	
   385                           ; 1 bytes @ 0x4
   386                           
   387     0074                     strlen@s:	
   388                           ; 1 bytes @ 0x4
   389                           
   390     0074                     ___adc_read@adc_value:	
   391                           ; 1 bytes @ 0x4
   392                           
   393     0074                     ___aldiv@dividend:	
   394                           ; 2 bytes @ 0x4
   395                           
   396                           
   397                           ; 4 bytes @ 0x4
   398     0074                     	ds	1
   399     0075                     ??___usart_write_ln:
   400     0075                     ___awdiv@counter:	
   401                           ; 1 bytes @ 0x5
   402                           
   403     0075                     ___awmod@counter:	
   404                           ; 1 bytes @ 0x5
   405                           
   406                           
   407                           ; 1 bytes @ 0x5
   408     0075                     	ds	1
   409     0076                     ___awdiv@sign:
   410     0076                     ___awmod@sign:	
   411                           ; 1 bytes @ 0x6
   412                           
   413     0076                     ___usart_write_ln@i:	
   414                           ; 1 bytes @ 0x6
   415                           
   416                           
   417                           ; 2 bytes @ 0x6
   418     0076                     	ds	1
   419     0077                     ?_abs:
   420     0077                     ___awdiv@quotient:	
   421                           ; 2 bytes @ 0x7
   422                           
   423     0077                     abs@a:	
   424                           ; 2 bytes @ 0x7
   425                           
   426                           
   427                           ; 2 bytes @ 0x7
   428     0077                     	ds	1
   429     0078                     ??___aldiv:
   430     0078                     ___usart_write_ln@data:	
   431                           ; 1 bytes @ 0x8
   432                           
   433                           
   434                           ; 1 bytes @ 0x8
   435     0078                     	ds	1
   436     0079                     ??_abs:
   437     0079                     ??___set_baud_rate:	
   438                           ; 1 bytes @ 0x9
   439                           
   440                           
   441                           ; 1 bytes @ 0x9
   442     0079                     	ds	2
   443     007B                     ?_vfpfcnvrt:
   444     007B                     vfpfcnvrt@fmt:	
   445                           ; 1 bytes @ 0xB
   446                           
   447                           
   448                           ; 1 bytes @ 0xB
   449     007B                     	ds	1
   450     007C                     vfpfcnvrt@ap:
   451                           
   452                           ; 1 bytes @ 0xC
   453     007C                     	ds	1
   454     007D                     ??_sprintf:
   455     007D                     ??_vfprintf:	
   456                           ; 1 bytes @ 0xD
   457                           
   458                           
   459                           ; 1 bytes @ 0xD
   460     007D                     	ds	1
   461                           
   462                           	psect	cstackBANK0
   463     0045                     __pcstackBANK0:
   464     0045                     ??_vfpfcnvrt:
   465     0045                     ___aldiv@counter:	
   466                           ; 1 bytes @ 0x0
   467                           
   468                           
   469                           ; 1 bytes @ 0x0
   470     0045                     	ds	1
   471     0046                     ___aldiv@sign:
   472                           
   473                           ; 1 bytes @ 0x1
   474     0046                     	ds	1
   475     0047                     vfpfcnvrt@done:
   476     0047                     ___aldiv@quotient:	
   477                           ; 1 bytes @ 0x2
   478                           
   479                           
   480                           ; 4 bytes @ 0x2
   481     0047                     	ds	1
   482     0048                     vfpfcnvrt@fp:
   483                           
   484                           ; 1 bytes @ 0x3
   485     0048                     	ds	1
   486     0049                     vfpfcnvrt@cp:
   487                           
   488                           ; 1 bytes @ 0x4
   489     0049                     	ds	1
   490     004A                     vfpfcnvrt@convarg:
   491                           
   492                           ; 4 bytes @ 0x5
   493     004A                     	ds	1
   494     004B                     ?___set_baud_rate:
   495     004B                     ___set_baud_rate@baud_rate:	
   496                           ; 1 bytes @ 0x6
   497                           
   498                           
   499                           ; 2 bytes @ 0x6
   500     004B                     	ds	3
   501     004E                     vfpfcnvrt@c:
   502                           
   503                           ; 1 bytes @ 0x9
   504     004E                     	ds	1
   505     004F                     ?_vfprintf:
   506     004F                     vfprintf@fmt:	
   507                           ; 2 bytes @ 0xA
   508                           
   509                           
   510                           ; 1 bytes @ 0xA
   511     004F                     	ds	1
   512     0050                     vfprintf@ap:
   513                           
   514                           ; 1 bytes @ 0xB
   515     0050                     	ds	1
   516     0051                     vfprintf@fp:
   517                           
   518                           ; 1 bytes @ 0xC
   519     0051                     	ds	1
   520     0052                     vfprintf@cfmt:
   521                           
   522                           ; 1 bytes @ 0xD
   523     0052                     	ds	1
   524     0053                     ?_sprintf:
   525     0053                     sprintf@fmt:	
   526                           ; 2 bytes @ 0xE
   527                           
   528                           
   529                           ; 1 bytes @ 0xE
   530     0053                     	ds	3
   531     0056                     sprintf@ap:
   532                           
   533                           ; 1 bytes @ 0x11
   534     0056                     	ds	1
   535     0057                     sprintf@s:
   536                           
   537                           ; 1 bytes @ 0x12
   538     0057                     	ds	1
   539     0058                     sprintf@f:
   540                           
   541                           ; 11 bytes @ 0x13
   542     0058                     	ds	11
   543     0063                     ??_main:
   544                           
   545                           ; 1 bytes @ 0x1E
   546     0063                     	ds	3
   547     0066                     main@adc_value:
   548                           
   549                           ; 2 bytes @ 0x21
   550     0066                     	ds	2
   551                           
   552                           	psect	maintext
   553     0502                     __pmaintext:	
   554 ;;
   555 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   556 ;;
   557 ;; *************** function _main *****************
   558 ;; Defined at:
   559 ;;		line 91 in file "main.c"
   560 ;; Parameters:    Size  Location     Type
   561 ;;		None
   562 ;; Auto vars:     Size  Location     Type
   563 ;;  adc_value       2   33[BANK0 ] int 
   564 ;; Return value:  Size  Location     Type
   565 ;;                  1    wreg      void 
   566 ;; Registers used:
   567 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   568 ;; Tracked objects:
   569 ;;		On entry : B00/0
   570 ;;		On exit  : 0/0
   571 ;;		Unchanged: 0/0
   572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   573 ;;      Params:         0       0       0       0       0
   574 ;;      Locals:         0       2       0       0       0
   575 ;;      Temps:          0       3       0       0       0
   576 ;;      Totals:         0       5       0       0       0
   577 ;;Total ram usage:        5 bytes
   578 ;; Hardware stack levels required when called: 5
   579 ;; This function calls:
   580 ;;		___adc_read
   581 ;;		___init_adc
   582 ;;		___init_usart
   583 ;;		___set_baud_rate
   584 ;;		___usart_write_ln
   585 ;;		_sprintf
   586 ;; This function is called by:
   587 ;;		Startup code after reset
   588 ;; This function uses a non-reentrant model
   589 ;;
   590                           
   591     0502                     _main:	
   592                           ;psect for function _main
   593                           
   594     0502                     l1224:	
   595                           ;incstack = 0
   596                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   597                           
   598                           
   599                           ;main.c: 92:     __init_adc();
   600     0502  120A  118A  2419  120A  118A  	fcall	___init_adc
   601     0507                     l1226:
   602                           
   603                           ;main.c: 93:     __init_usart();
   604     0507  120A  118A  240D  120A  118A  	fcall	___init_usart
   605     050C                     l1228:
   606                           
   607                           ;main.c: 94:     __set_baud_rate(9600);
   608     050C  3080               	movlw	128
   609     050D  1283               	bcf	3,5	;RP0=0, select bank0
   610     050E  1303               	bcf	3,6	;RP1=0, select bank0
   611     050F  00CB               	movwf	___set_baud_rate@baud_rate
   612     0510  3025               	movlw	37
   613     0511  00CC               	movwf	___set_baud_rate@baud_rate+1
   614     0512  120A  118A  244F  120A  118A  	fcall	___set_baud_rate
   615     0517                     l1230:
   616                           
   617                           ;main.c: 97:         int adc_value = __adc_read(1);
   618     0517  3001               	movlw	1
   619     0518  00F0               	movwf	___adc_read@adc_channel
   620     0519  3000               	movlw	0
   621     051A  00F1               	movwf	___adc_read@adc_channel+1
   622     051B  120A  118A  24AD  120A  118A  	fcall	___adc_read
   623     0520  0871               	movf	?___adc_read+1,w
   624     0521  1283               	bcf	3,5	;RP0=0, select bank0
   625     0522  1303               	bcf	3,6	;RP1=0, select bank0
   626     0523  00E7               	movwf	main@adc_value+1
   627     0524  0870               	movf	?___adc_read,w
   628     0525  00E6               	movwf	main@adc_value
   629     0526                     l1232:
   630                           
   631                           ;main.c: 98:         sprintf(buffer, "Sensor Value = %d", adc_value);
   632     0526  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   633     0527  00D3               	movwf	sprintf@fmt
   634     0528  0867               	movf	main@adc_value+1,w
   635     0529  00D5               	movwf	?_sprintf+2
   636     052A  0866               	movf	main@adc_value,w
   637     052B  00D4               	movwf	?_sprintf+1
   638     052C  30A0               	movlw	(low (_buffer| 0))& (0+255)
   639     052D  120A  118A  246D  120A  118A  	fcall	_sprintf
   640     0532                     l1234:
   641                           
   642                           ;main.c: 99:         __usart_write_ln(buffer);
   643     0532  30A0               	movlw	(low (_buffer| 0))& (0+255)
   644     0533  120A  118A  24D5  120A  118A  	fcall	___usart_write_ln
   645                           
   646                           ;main.c: 100:         _delay((unsigned long)((1000)*(16000000/4000.0)));
   647     0538  3015               	movlw	21
   648     0539  1283               	bcf	3,5	;RP0=0, select bank0
   649     053A  1303               	bcf	3,6	;RP1=0, select bank0
   650     053B  00E5               	movwf	??_main+2
   651     053C  304B               	movlw	75
   652     053D  00E4               	movwf	??_main+1
   653     053E  30BD               	movlw	189
   654     053F  00E3               	movwf	??_main
   655     0540                     u997:
   656     0540  0BE3               	decfsz	??_main,f
   657     0541  2D40               	goto	u997
   658     0542  0BE4               	decfsz	??_main+1,f
   659     0543  2D40               	goto	u997
   660     0544  0BE5               	decfsz	??_main+2,f
   661     0545  2D40               	goto	u997
   662     0546  2D47               	nop2
   663     0547  2D17               	goto	l1230
   664     0548  120A  118A  2800   	ljmp	start
   665     054B                     __end_of_main:
   666                           
   667                           	psect	text1
   668     046D                     __ptext1:	
   669 ;; *************** function _sprintf *****************
   670 ;; Defined at:
   671 ;;		line 9 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/nf_sprintf.c"
   672 ;; Parameters:    Size  Location     Type
   673 ;;  s               1    wreg     PTR unsigned char 
   674 ;;		 -> buffer(50), 
   675 ;;  fmt             1   14[BANK0 ] PTR const unsigned char 
   676 ;;		 -> STR_1(18), 
   677 ;; Auto vars:     Size  Location     Type
   678 ;;  s               1   18[BANK0 ] PTR unsigned char 
   679 ;;		 -> buffer(50), 
   680 ;;  f              11   19[BANK0 ] struct _IO_FILE
   681 ;;  ret             2    0        int 
   682 ;;  ap              1   17[BANK0 ] PTR void [1]
   683 ;;		 -> ?_sprintf(2), 
   684 ;; Return value:  Size  Location     Type
   685 ;;                  2   14[BANK0 ] int 
   686 ;; Registers used:
   687 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   688 ;; Tracked objects:
   689 ;;		On entry : 0/0
   690 ;;		On exit  : 0/0
   691 ;;		Unchanged: 0/0
   692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   693 ;;      Params:         0       3       0       0       0
   694 ;;      Locals:         0      13       0       0       0
   695 ;;      Temps:          1       0       0       0       0
   696 ;;      Totals:         1      16       0       0       0
   697 ;;Total ram usage:       17 bytes
   698 ;; Hardware stack levels used: 1
   699 ;; Hardware stack levels required when called: 4
   700 ;; This function calls:
   701 ;;		_vfprintf
   702 ;; This function is called by:
   703 ;;		_main
   704 ;; This function uses a non-reentrant model
   705 ;;
   706                           
   707     046D                     _sprintf:	
   708                           ;psect for function _sprintf
   709                           
   710                           
   711                           ;incstack = 0
   712                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   713                           ;sprintf@s stored from wreg
   714     046D  1283               	bcf	3,5	;RP0=0, select bank0
   715     046E  1303               	bcf	3,6	;RP1=0, select bank0
   716     046F  00D7               	movwf	sprintf@s
   717     0470                     l1212:
   718     0470  3054               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   719     0471  00D6               	movwf	sprintf@ap
   720     0472  0857               	movf	sprintf@s,w
   721     0473  00D8               	movwf	sprintf@f
   722     0474                     l1214:
   723     0474  01DA               	clrf	sprintf@f+2
   724     0475  01DB               	clrf	sprintf@f+3
   725     0476                     l1216:
   726     0476  01E1               	clrf	sprintf@f+9
   727     0477  01E2               	clrf	sprintf@f+10
   728     0478                     l1218:
   729     0478  0853               	movf	sprintf@fmt,w
   730     0479  00CF               	movwf	vfprintf@fmt
   731     047A  3056               	movlw	(low (sprintf@ap| 0))& (0+255)
   732     047B  00D0               	movwf	vfprintf@ap
   733     047C  3058               	movlw	(low (sprintf@f| 0))& (0+255)
   734     047D  120A  118A  248C  120A  118A  	fcall	_vfprintf
   735     0482                     l1220:
   736     0482  1283               	bcf	3,5	;RP0=0, select bank0
   737     0483  1303               	bcf	3,6	;RP1=0, select bank0
   738     0484  085A               	movf	sprintf@f+2,w
   739     0485  0757               	addwf	sprintf@s,w
   740     0486  00FD               	movwf	??_sprintf
   741     0487  087D               	movf	??_sprintf,w
   742     0488  0084               	movwf	4
   743     0489  1383               	bcf	3,7	;select IRP bank0
   744     048A  0180               	clrf	0
   745     048B                     l610:
   746     048B  0008               	return
   747     048C                     __end_of_sprintf:
   748                           
   749                           	psect	text2
   750     048C                     __ptext2:	
   751 ;; *************** function _vfprintf *****************
   752 ;; Defined at:
   753 ;;		line 1817 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c"
   754 ;; Parameters:    Size  Location     Type
   755 ;;  fp              1    wreg     PTR struct _IO_FILE
   756 ;;		 -> sprintf@f(11), 
   757 ;;  fmt             1   10[BANK0 ] PTR const unsigned char 
   758 ;;		 -> STR_1(18), 
   759 ;;  ap              1   11[BANK0 ] PTR PTR void 
   760 ;;		 -> sprintf@ap(1), 
   761 ;; Auto vars:     Size  Location     Type
   762 ;;  fp              1   12[BANK0 ] PTR struct _IO_FILE
   763 ;;		 -> sprintf@f(11), 
   764 ;;  cfmt            1   13[BANK0 ] PTR unsigned char 
   765 ;;		 -> STR_1(18), 
   766 ;; Return value:  Size  Location     Type
   767 ;;                  2   10[BANK0 ] int 
   768 ;; Registers used:
   769 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   770 ;; Tracked objects:
   771 ;;		On entry : 0/0
   772 ;;		On exit  : 0/0
   773 ;;		Unchanged: 0/0
   774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   775 ;;      Params:         0       2       0       0       0
   776 ;;      Locals:         0       2       0       0       0
   777 ;;      Temps:          0       0       0       0       0
   778 ;;      Totals:         0       4       0       0       0
   779 ;;Total ram usage:        4 bytes
   780 ;; Hardware stack levels used: 1
   781 ;; Hardware stack levels required when called: 3
   782 ;; This function calls:
   783 ;;		_vfpfcnvrt
   784 ;; This function is called by:
   785 ;;		_sprintf
   786 ;; This function uses a non-reentrant model
   787 ;;
   788                           
   789     048C                     _vfprintf:	
   790                           ;psect for function _vfprintf
   791                           
   792                           
   793                           ;incstack = 0
   794                           ; Regs used in _vfprintf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   795                           ;vfprintf@fp stored from wreg
   796     048C  1283               	bcf	3,5	;RP0=0, select bank0
   797     048D  1303               	bcf	3,6	;RP1=0, select bank0
   798     048E  00D1               	movwf	vfprintf@fp
   799     048F                     l1168:
   800                           
   801                           ;/opt/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1817: int vfprintf(FILE *fp, 
      +                          const char *fmt, va_list ap);/opt/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1
      +                          818: {;/opt/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1820:     char *cfmt;;/
      +                          opt/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1822:     cfmt = (char *)fmt;
   802     048F  084F               	movf	vfprintf@fmt,w
   803     0490  00D2               	movwf	vfprintf@cfmt
   804                           
   805                           ;/opt/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1826:     while (*cfmt) {
   806     0491  2C9C               	goto	l1172
   807     0492                     l1170:
   808                           
   809                           ;/opt/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1830:    vfpfcnvrt(fp, &cfmt,
      +                           ap);
   810     0492  3052               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
   811     0493  00FB               	movwf	vfpfcnvrt@fmt
   812     0494  0850               	movf	vfprintf@ap,w
   813     0495  00FC               	movwf	vfpfcnvrt@ap
   814     0496  0851               	movf	vfprintf@fp,w
   815     0497  120A  118A  26FE  120A  118A  	fcall	_vfpfcnvrt
   816     049C                     l1172:
   817                           
   818                           ;/opt/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1826:     while (*cfmt) {
   819     049C  1283               	bcf	3,5	;RP0=0, select bank0
   820     049D  1303               	bcf	3,6	;RP1=0, select bank0
   821     049E  0852               	movf	vfprintf@cfmt,w
   822     049F  0084               	movwf	4
   823     04A0  120A  118A  2003  120A  118A  	fcall	stringdir
   824     04A5  3A00               	xorlw	0
   825     04A6  1D03               	skipz
   826     04A7  2CA9               	goto	u961
   827     04A8  2CAA               	goto	u960
   828     04A9                     u961:
   829     04A9  2C92               	goto	l1170
   830     04AA                     u960:
   831     04AA                     l1174:
   832                           
   833                           ;/opt/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1835:  return 0;
   834     04AA  01CF               	clrf	?_vfprintf
   835     04AB  01D0               	clrf	?_vfprintf+1
   836     04AC                     l654:
   837     04AC  0008               	return
   838     04AD                     __end_of_vfprintf:
   839                           
   840                           	psect	text3
   841     06FE                     __ptext3:	
   842 ;; *************** function _vfpfcnvrt *****************
   843 ;; Defined at:
   844 ;;		line 1177 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c"
   845 ;; Parameters:    Size  Location     Type
   846 ;;  fp              1    wreg     PTR struct _IO_FILE
   847 ;;		 -> sprintf@f(11), 
   848 ;;  fmt             1   11[COMMON] PTR PTR unsigned char 
   849 ;;		 -> vfprintf@cfmt(1), 
   850 ;;  ap              1   12[COMMON] PTR PTR void 
   851 ;;		 -> sprintf@ap(1), 
   852 ;; Auto vars:     Size  Location     Type
   853 ;;  fp              1    3[BANK0 ] PTR struct _IO_FILE
   854 ;;		 -> sprintf@f(11), 
   855 ;;  convarg         4    5[BANK0 ] struct .
   856 ;;  c               1    9[BANK0 ] unsigned char 
   857 ;;  cp              1    4[BANK0 ] PTR unsigned char 
   858 ;;		 -> STR_1(18), 
   859 ;;  done            1    2[BANK0 ] _Bool 
   860 ;; Return value:  Size  Location     Type
   861 ;;                  1    wreg      void 
   862 ;; Registers used:
   863 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   864 ;; Tracked objects:
   865 ;;		On entry : 0/0
   866 ;;		On exit  : 0/0
   867 ;;		Unchanged: 0/0
   868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   869 ;;      Params:         2       0       0       0       0
   870 ;;      Locals:         0       8       0       0       0
   871 ;;      Temps:          0       2       0       0       0
   872 ;;      Totals:         2      10       0       0       0
   873 ;;Total ram usage:       12 bytes
   874 ;; Hardware stack levels used: 1
   875 ;; Hardware stack levels required when called: 2
   876 ;; This function calls:
   877 ;;		___awdiv
   878 ;;		___awmod
   879 ;;		_abs
   880 ;;		_fputc
   881 ;; This function is called by:
   882 ;;		_vfprintf
   883 ;; This function uses a non-reentrant model
   884 ;;
   885                           
   886     06FE                     _vfpfcnvrt:	
   887                           ;psect for function _vfpfcnvrt
   888                           
   889                           
   890                           ;incstack = 0
   891                           ; Regs used in _vfpfcnvrt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   892                           ;vfpfcnvrt@fp stored from wreg
   893     06FE  1283               	bcf	3,5	;RP0=0, select bank0
   894     06FF  1303               	bcf	3,6	;RP1=0, select bank0
   895     0700  00C8               	movwf	vfpfcnvrt@fp
   896     0701                     l1068:
   897                           
   898                           ;/opt/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1177: vfpfcnvrt(FILE *fp, cha
      +                          r *fmt[], va_list ap);/opt/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1178: {;
      +                          /opt/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1179:     char c, *cp;;/opt/mi
      +                          crochip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1180:     _Bool done;;/opt/microchip/
      +                          xc8/v2.45/pic/sources/c99/common/doprnt.c: 1188:  } convarg;;/opt/microchip/xc8/v2.45/pi
      +                          c/sources/c99/common/doprnt.c: 1201:     if ((*fmt)[0] == '%') {
   899     0701  087B               	movf	vfpfcnvrt@fmt,w
   900     0702  0084               	movwf	4
   901     0703  1383               	bcf	3,7	;select IRP bank0
   902     0704  0800               	movf	0,w
   903     0705  0084               	movwf	4
   904     0706  120A  118A  2003  120A  118A  	fcall	stringdir
   905     070B  3A25               	xorlw	37
   906     070C  1D03               	skipz
   907     070D  2F0F               	goto	u741
   908     070E  2F10               	goto	u740
   909     070F                     u741:
   910     070F  2FD3               	goto	l1108
   911     0710                     u740:
   912     0710                     l1070:
   913                           
   914                           ;/opt/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1202:         ++*fmt;
   915     0710  3001               	movlw	1
   916     0711  00C5               	movwf	??_vfpfcnvrt
   917     0712  087B               	movf	vfpfcnvrt@fmt,w
   918     0713  0084               	movwf	4
   919     0714  0845               	movf	??_vfpfcnvrt,w
   920     0715  0780               	addwf	0,f
   921     0716                     l1072:
   922                           
   923                           ;/opt/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1204:         flags = width =
      +                           0;
   924     0716  01C0               	clrf	_width
   925     0717  01C1               	clrf	_width+1
   926     0718  1003               	clrc
   927     0719  3000               	movlw	0
   928     071A  1803               	btfsc	3,0
   929     071B  3001               	movlw	1
   930     071C  00C4               	movwf	_flags
   931     071D                     l1074:
   932                           
   933                           ;/opt/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1205:         prec = -1;
   934     071D  30FF               	movlw	255
   935     071E  00C2               	movwf	_prec
   936     071F  30FF               	movlw	255
   937     0720  00C3               	movwf	_prec+1
   938                           
   939                           ;/opt/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1291:   cp = *fmt;
   940     0721  087B               	movf	vfpfcnvrt@fmt,w
   941     0722  0084               	movwf	4
   942     0723  0800               	movf	0,w
   943     0724  00C9               	movwf	vfpfcnvrt@cp
   944     0725                     l1076:
   945                           
   946                           ;/opt/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1361:   if (*cp == 'd' || *cp
      +                           == 'i') {
   947     0725  0849               	movf	vfpfcnvrt@cp,w
   948     0726  0084               	movwf	4
   949     0727  120A  118A  2003  120A  118A  	fcall	stringdir
   950     072C  3A64               	xorlw	100
   951     072D  1903               	skipnz
   952     072E  2F30               	goto	u751
   953     072F  2F31               	goto	u750
   954     0730                     u751:
   955     0730  2F3D               	goto	l1080
   956     0731                     u750:
   957     0731                     l1078:
   958     0731  0849               	movf	vfpfcnvrt@cp,w
   959     0732  0084               	movwf	4
   960     0733  120A  118A  2003  120A  118A  	fcall	stringdir
   961     0738  3A69               	xorlw	105
   962     0739  1D03               	skipz
   963     073A  2F3C               	goto	u761
   964     073B  2F3D               	goto	u760
   965     073C                     u761:
   966     073C  2FC9               	goto	l1104
   967     073D                     u760:
   968     073D                     l1080:
   969                           
   970                           ;/opt/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1404:    convarg.sint = (vfpf
      +                          _sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
   971     073D  087C               	movf	vfpfcnvrt@ap,w
   972     073E  0084               	movwf	4
   973     073F  0800               	movf	0,w
   974     0740  00C5               	movwf	??_vfpfcnvrt
   975     0741  3002               	movlw	2
   976     0742  0780               	addwf	0,f
   977     0743  0845               	movf	??_vfpfcnvrt,w
   978     0744  0084               	movwf	4
   979     0745  0800               	movf	0,w
   980     0746  00CA               	movwf	vfpfcnvrt@convarg
   981     0747  0A84               	incf	4,f
   982     0748  0800               	movf	0,w
   983     0749  00CB               	movwf	vfpfcnvrt@convarg+1
   984                           
   985                           ;/opt/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1406:    *fmt = cp+1;
   986     074A  087B               	movf	vfpfcnvrt@fmt,w
   987     074B  0084               	movwf	4
   988     074C  0849               	movf	vfpfcnvrt@cp,w
   989     074D  3E01               	addlw	1
   990     074E  0080               	movwf	0
   991     074F                     l1082:
   992                           
   993                           ;/opt/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1408:    c = sizeof(dbuf);
   994     074F  3020               	movlw	32
   995     0750  00CE               	movwf	vfpfcnvrt@c
   996     0751                     l1084:
   997                           
   998                           ;/opt/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1409:    done = convarg.sint 
      +                          < 0;
   999     0751  1BCB               	btfsc	vfpfcnvrt@convarg+1,7
  1000     0752  2F54               	goto	u771
  1001     0753  2F56               	goto	u770
  1002     0754                     u771:
  1003     0754  3001               	movlw	1
  1004     0755  2F57               	goto	u780
  1005     0756                     u770:
  1006     0756  3000               	movlw	0
  1007     0757                     u780:
  1008     0757  00C7               	movwf	vfpfcnvrt@done
  1009     0758                     l1086:
  1010                           
  1011                           ;/opt/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1411:     dbuf[--c] = abs(con
      +                          varg.sint % 10) + '0';
  1012     0758  3001               	movlw	1
  1013     0759  02CE               	subwf	vfpfcnvrt@c,f
  1014     075A  084E               	movf	vfpfcnvrt@c,w
  1015     075B  3E20               	addlw	(low (_dbuf| 0))& (0+255)
  1016     075C  0084               	movwf	4
  1017     075D  300A               	movlw	10
  1018     075E  00F0               	movwf	___awmod@divisor
  1019     075F  3000               	movlw	0
  1020     0760  00F1               	movwf	___awmod@divisor+1
  1021     0761  084B               	movf	vfpfcnvrt@convarg+1,w
  1022     0762  00F3               	movwf	___awmod@dividend+1
  1023     0763  084A               	movf	vfpfcnvrt@convarg,w
  1024     0764  00F2               	movwf	___awmod@dividend
  1025     0765  120A  118A  25A1  120A  118A  	fcall	___awmod
  1026     076A  0871               	movf	?___awmod+1,w
  1027     076B  00F8               	movwf	abs@a+1
  1028     076C  0870               	movf	?___awmod,w
  1029     076D  00F7               	movwf	abs@a
  1030     076E  120A  118A  2427  120A  118A  	fcall	_abs
  1031     0773  0877               	movf	?_abs,w
  1032     0774  3E30               	addlw	48
  1033     0775  1383               	bcf	3,7	;select IRP bank0
  1034     0776  0080               	movwf	0
  1035     0777                     l1088:
  1036                           
  1037                           ;/opt/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1412:     convarg.sint /= 10;
  1038     0777  300A               	movlw	10
  1039     0778  00F0               	movwf	___awdiv@divisor
  1040     0779  3000               	movlw	0
  1041     077A  00F1               	movwf	___awdiv@divisor+1
  1042     077B  1283               	bcf	3,5	;RP0=0, select bank0
  1043     077C  1303               	bcf	3,6	;RP1=0, select bank0
  1044     077D  084B               	movf	vfpfcnvrt@convarg+1,w
  1045     077E  00F3               	movwf	___awdiv@dividend+1
  1046     077F  084A               	movf	vfpfcnvrt@convarg,w
  1047     0780  00F2               	movwf	___awdiv@dividend
  1048     0781  120A  118A  25FA  120A  118A  	fcall	___awdiv
  1049     0786  0871               	movf	?___awdiv+1,w
  1050     0787  1283               	bcf	3,5	;RP0=0, select bank0
  1051     0788  1303               	bcf	3,6	;RP1=0, select bank0
  1052     0789  00CB               	movwf	vfpfcnvrt@convarg+1
  1053     078A  0870               	movf	?___awdiv,w
  1054     078B  00CA               	movwf	vfpfcnvrt@convarg
  1055                           
  1056                           ;/opt/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1416:    } while (convarg.sin
      +                          t != 0 && c != 0);
  1057     078C  084A               	movf	vfpfcnvrt@convarg,w
  1058     078D  044B               	iorwf	vfpfcnvrt@convarg+1,w
  1059     078E  1903               	btfsc	3,2
  1060     078F  2F91               	goto	u791
  1061     0790  2F92               	goto	u790
  1062     0791                     u791:
  1063     0791  2F97               	goto	l1092
  1064     0792                     u790:
  1065     0792                     l1090:
  1066     0792  084E               	movf	vfpfcnvrt@c,w
  1067     0793  1D03               	btfss	3,2
  1068     0794  2F96               	goto	u801
  1069     0795  2F97               	goto	u800
  1070     0796                     u801:
  1071     0796  2F58               	goto	l1086
  1072     0797                     u800:
  1073     0797                     l1092:
  1074                           
  1075                           ;/opt/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1417:    if (c != 0 && done) 
      +                          {
  1076     0797  084E               	movf	vfpfcnvrt@c,w
  1077     0798  1903               	btfsc	3,2
  1078     0799  2F9B               	goto	u811
  1079     079A  2F9C               	goto	u810
  1080     079B                     u811:
  1081     079B  2FC2               	goto	l1102
  1082     079C                     u810:
  1083     079C                     l1094:
  1084     079C  0847               	movf	vfpfcnvrt@done,w
  1085     079D  1903               	btfsc	3,2
  1086     079E  2FA0               	goto	u821
  1087     079F  2FA1               	goto	u820
  1088     07A0                     u821:
  1089     07A0  2FC2               	goto	l1102
  1090     07A1                     u820:
  1091     07A1                     l1096:
  1092                           
  1093                           ;/opt/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1418:     dbuf[--c] = '-';
  1094     07A1  3001               	movlw	1
  1095     07A2  02CE               	subwf	vfpfcnvrt@c,f
  1096     07A3  084E               	movf	vfpfcnvrt@c,w
  1097     07A4  3E20               	addlw	(low (_dbuf| 0))& (0+255)
  1098     07A5  0084               	movwf	4
  1099     07A6  302D               	movlw	45
  1100     07A7  1383               	bcf	3,7	;select IRP bank0
  1101     07A8  0080               	movwf	0
  1102     07A9  2FC2               	goto	l1102
  1103     07AA                     l1098:
  1104                           
  1105                           ;/opt/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1424:     fputc(dbuf[c++], fp
      +                          );
  1106     07AA  084E               	movf	vfpfcnvrt@c,w
  1107     07AB  3E20               	addlw	(low (_dbuf| 0))& (0+255)
  1108     07AC  0084               	movwf	4
  1109     07AD  1383               	bcf	3,7	;select IRP bank0
  1110     07AE  0800               	movf	0,w
  1111     07AF  00C5               	movwf	??_vfpfcnvrt
  1112     07B0  01C6               	clrf	??_vfpfcnvrt+1
  1113     07B1  0845               	movf	??_vfpfcnvrt,w
  1114     07B2  00F0               	movwf	fputc@c
  1115     07B3  0846               	movf	??_vfpfcnvrt+1,w
  1116     07B4  00F1               	movwf	fputc@c+1
  1117     07B5  0848               	movf	vfpfcnvrt@fp,w
  1118     07B6  00F2               	movwf	fputc@fp
  1119     07B7  120A  118A  254B  120A  118A  	fcall	_fputc
  1120     07BC                     l1100:
  1121     07BC  3001               	movlw	1
  1122     07BD  1283               	bcf	3,5	;RP0=0, select bank0
  1123     07BE  1303               	bcf	3,6	;RP1=0, select bank0
  1124     07BF  00C5               	movwf	??_vfpfcnvrt
  1125     07C0  0845               	movf	??_vfpfcnvrt,w
  1126     07C1  07CE               	addwf	vfpfcnvrt@c,f
  1127     07C2                     l1102:
  1128                           
  1129                           ;/opt/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1423:    while (c != sizeof(d
      +                          buf)) {
  1130     07C2  3020               	movlw	32
  1131     07C3  064E               	xorwf	vfpfcnvrt@c,w
  1132     07C4  1D03               	btfss	3,2
  1133     07C5  2FC7               	goto	u831
  1134     07C6  2FC8               	goto	u830
  1135     07C7                     u831:
  1136     07C7  2FAA               	goto	l1098
  1137     07C8                     u830:
  1138     07C8  2FEA               	goto	l648
  1139     07C9                     l1104:
  1140                           
  1141                           ;/opt/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1806:         ++*fmt;
  1142     07C9  3001               	movlw	1
  1143     07CA  1283               	bcf	3,5	;RP0=0, select bank0
  1144     07CB  1303               	bcf	3,6	;RP1=0, select bank0
  1145     07CC  00C5               	movwf	??_vfpfcnvrt
  1146     07CD  087B               	movf	vfpfcnvrt@fmt,w
  1147     07CE  0084               	movwf	4
  1148     07CF  0845               	movf	??_vfpfcnvrt,w
  1149     07D0  1383               	bcf	3,7	;select IRP bank0
  1150     07D1  0780               	addwf	0,f
  1151     07D2  2FEA               	goto	l648
  1152     07D3                     l1108:
  1153                           
  1154                           ;/opt/microchip/xc8/v2.45/pic/sources/c99/common/doprnt.c: 1811:     fputc((int)(*fmt)[0
      +                          ], fp);
  1155     07D3  087B               	movf	vfpfcnvrt@fmt,w
  1156     07D4  0084               	movwf	4
  1157     07D5  0800               	movf	0,w
  1158     07D6  0084               	movwf	4
  1159     07D7  120A  118A  2003  120A  118A  	fcall	stringdir
  1160     07DC  00C5               	movwf	??_vfpfcnvrt
  1161     07DD  01C6               	clrf	??_vfpfcnvrt+1
  1162     07DE  0845               	movf	??_vfpfcnvrt,w
  1163     07DF  00F0               	movwf	fputc@c
  1164     07E0  0846               	movf	??_vfpfcnvrt+1,w
  1165     07E1  00F1               	movwf	fputc@c+1
  1166     07E2  0848               	movf	vfpfcnvrt@fp,w
  1167     07E3  00F2               	movwf	fputc@fp
  1168     07E4  120A  118A  254B  120A  118A  	fcall	_fputc
  1169     07E9  2FC9               	goto	l1104
  1170     07EA                     l648:
  1171     07EA  0008               	return
  1172     07EB                     __end_of_vfpfcnvrt:
  1173                           
  1174                           	psect	text4
  1175     054B                     __ptext4:	
  1176 ;; *************** function _fputc *****************
  1177 ;; Defined at:
  1178 ;;		line 8 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/nf_fputc.c"
  1179 ;; Parameters:    Size  Location     Type
  1180 ;;  c               2    0[COMMON] int 
  1181 ;;  fp              1    2[COMMON] PTR struct _IO_FILE
  1182 ;;		 -> sprintf@f(11), 
  1183 ;; Auto vars:     Size  Location     Type
  1184 ;;		None
  1185 ;; Return value:  Size  Location     Type
  1186 ;;                  2    0[COMMON] int 
  1187 ;; Registers used:
  1188 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1189 ;; Tracked objects:
  1190 ;;		On entry : 0/0
  1191 ;;		On exit  : 0/0
  1192 ;;		Unchanged: 0/0
  1193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1194 ;;      Params:         3       0       0       0       0
  1195 ;;      Locals:         0       0       0       0       0
  1196 ;;      Temps:          5       0       0       0       0
  1197 ;;      Totals:         8       0       0       0       0
  1198 ;;Total ram usage:        8 bytes
  1199 ;; Hardware stack levels used: 1
  1200 ;; Hardware stack levels required when called: 1
  1201 ;; This function calls:
  1202 ;;		_putch
  1203 ;; This function is called by:
  1204 ;;		_vfpfcnvrt
  1205 ;; This function uses a non-reentrant model
  1206 ;;
  1207                           
  1208     054B                     _fputc:	
  1209                           ;psect for function _fputc
  1210                           
  1211     054B                     l1046:	
  1212                           ;incstack = 0
  1213                           ; Regs used in _fputc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1214                           
  1215     054B  0872               	movf	fputc@fp,w
  1216     054C  1903               	btfsc	3,2
  1217     054D  2D4F               	goto	u691
  1218     054E  2D50               	goto	u690
  1219     054F                     u691:
  1220     054F  2D55               	goto	l1050
  1221     0550                     u690:
  1222     0550                     l1048:
  1223     0550  0872               	movf	fputc@fp,w
  1224     0551  1D03               	btfss	3,2
  1225     0552  2D54               	goto	u701
  1226     0553  2D55               	goto	u700
  1227     0554                     u701:
  1228     0554  2D5C               	goto	l1052
  1229     0555                     u700:
  1230     0555                     l1050:
  1231     0555  0870               	movf	fputc@c,w
  1232     0556  120A  118A  23FA  120A  118A  	fcall	_putch
  1233     055B  2DA0               	goto	l673
  1234     055C                     l1052:
  1235     055C  0872               	movf	fputc@fp,w
  1236     055D  3E09               	addlw	9
  1237     055E  0084               	movwf	4
  1238     055F  1383               	bcf	3,7	;select IRP bank0
  1239     0560  0800               	movf	0,w
  1240     0561  00F3               	movwf	??_fputc
  1241     0562  0A84               	incf	4,f
  1242     0563  0800               	movf	0,w
  1243     0564  00F4               	movwf	??_fputc+1
  1244     0565  0873               	movf	??_fputc,w
  1245     0566  0474               	iorwf	??_fputc+1,w
  1246     0567  1903               	btfsc	3,2
  1247     0568  2D6A               	goto	u711
  1248     0569  2D6B               	goto	u710
  1249     056A                     u711:
  1250     056A  2D89               	goto	l1056
  1251     056B                     u710:
  1252     056B                     l1054:
  1253     056B  0872               	movf	fputc@fp,w
  1254     056C  3E09               	addlw	9
  1255     056D  0084               	movwf	4
  1256     056E  0800               	movf	0,w
  1257     056F  00F3               	movwf	??_fputc
  1258     0570  0A84               	incf	4,f
  1259     0571  0800               	movf	0,w
  1260     0572  00F4               	movwf	??_fputc+1
  1261     0573  0872               	movf	fputc@fp,w
  1262     0574  3E02               	addlw	2
  1263     0575  0084               	movwf	4
  1264     0576  0800               	movf	0,w
  1265     0577  00F5               	movwf	??_fputc+2
  1266     0578  0A84               	incf	4,f
  1267     0579  0800               	movf	0,w
  1268     057A  00F6               	movwf	??_fputc+3
  1269     057B  0876               	movf	??_fputc+3,w
  1270     057C  3A80               	xorlw	128
  1271     057D  00F7               	movwf	??_fputc+4
  1272     057E  0874               	movf	??_fputc+1,w
  1273     057F  3A80               	xorlw	128
  1274     0580  0277               	subwf	??_fputc+4,w
  1275     0581  1D03               	skipz
  1276     0582  2D85               	goto	u725
  1277     0583  0873               	movf	??_fputc,w
  1278     0584  0275               	subwf	??_fputc+2,w
  1279     0585                     u725:
  1280     0585  1803               	skipnc
  1281     0586  2D88               	goto	u721
  1282     0587  2D89               	goto	u720
  1283     0588                     u721:
  1284     0588  2DA0               	goto	l673
  1285     0589                     u720:
  1286     0589                     l1056:
  1287     0589  0872               	movf	fputc@fp,w
  1288     058A  3E02               	addlw	2
  1289     058B  0084               	movwf	4
  1290     058C  1383               	bcf	3,7	;select IRP bank0
  1291     058D  0800               	movf	0,w
  1292     058E  00F3               	movwf	??_fputc
  1293     058F  0872               	movf	fputc@fp,w
  1294     0590  0084               	movwf	4
  1295     0591  0800               	movf	0,w
  1296     0592  0773               	addwf	??_fputc,w
  1297     0593  00F4               	movwf	??_fputc+1
  1298     0594  0874               	movf	??_fputc+1,w
  1299     0595  0084               	movwf	4
  1300     0596  0870               	movf	fputc@c,w
  1301     0597  0080               	movwf	0
  1302     0598  0872               	movf	fputc@fp,w
  1303     0599  3E02               	addlw	2
  1304     059A  0084               	movwf	4
  1305     059B  3001               	movlw	1
  1306     059C  0780               	addwf	0,f
  1307     059D  0A84               	incf	4,f
  1308     059E  1803               	skipnc
  1309     059F  0A80               	incf	0,f
  1310     05A0                     l673:
  1311     05A0  0008               	return
  1312     05A1                     __end_of_fputc:
  1313                           
  1314                           	psect	text5
  1315     03FA                     __ptext5:	
  1316 ;; *************** function _putch *****************
  1317 ;; Defined at:
  1318 ;;		line 7 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/putch.c"
  1319 ;; Parameters:    Size  Location     Type
  1320 ;;  c               1    wreg     unsigned char 
  1321 ;; Auto vars:     Size  Location     Type
  1322 ;;  c               1    0[COMMON] unsigned char 
  1323 ;; Return value:  Size  Location     Type
  1324 ;;                  1    wreg      void 
  1325 ;; Registers used:
  1326 ;;		wreg
  1327 ;; Tracked objects:
  1328 ;;		On entry : 0/0
  1329 ;;		On exit  : 0/0
  1330 ;;		Unchanged: 0/0
  1331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1332 ;;      Params:         0       0       0       0       0
  1333 ;;      Locals:         0       0       0       0       0
  1334 ;;      Temps:          0       0       0       0       0
  1335 ;;      Totals:         0       0       0       0       0
  1336 ;;Total ram usage:        0 bytes
  1337 ;; Hardware stack levels used: 1
  1338 ;; This function calls:
  1339 ;;		Nothing
  1340 ;; This function is called by:
  1341 ;;		_fputc
  1342 ;; This function uses a non-reentrant model
  1343 ;;
  1344                           
  1345     03FA                     _putch:	
  1346                           ;psect for function _putch
  1347                           
  1348     03FA                     l684:	
  1349                           ;incstack = 0
  1350                           ; Regs used in _putch: [wreg]
  1351                           
  1352     03FA  0008               	return
  1353     03FB                     __end_of_putch:
  1354                           
  1355                           	psect	text6
  1356     0427                     __ptext6:	
  1357 ;; *************** function _abs *****************
  1358 ;; Defined at:
  1359 ;;		line 1 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/abs.c"
  1360 ;; Parameters:    Size  Location     Type
  1361 ;;  a               2    7[COMMON] int 
  1362 ;; Auto vars:     Size  Location     Type
  1363 ;;		None
  1364 ;; Return value:  Size  Location     Type
  1365 ;;                  2    7[COMMON] int 
  1366 ;; Registers used:
  1367 ;;		wreg, status,2, status,0
  1368 ;; Tracked objects:
  1369 ;;		On entry : 0/0
  1370 ;;		On exit  : 0/0
  1371 ;;		Unchanged: 0/0
  1372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1373 ;;      Params:         2       0       0       0       0
  1374 ;;      Locals:         0       0       0       0       0
  1375 ;;      Temps:          2       0       0       0       0
  1376 ;;      Totals:         4       0       0       0       0
  1377 ;;Total ram usage:        4 bytes
  1378 ;; Hardware stack levels used: 1
  1379 ;; This function calls:
  1380 ;;		Nothing
  1381 ;; This function is called by:
  1382 ;;		_vfpfcnvrt
  1383 ;; This function uses a non-reentrant model
  1384 ;;
  1385                           
  1386     0427                     _abs:	
  1387                           ;psect for function _abs
  1388                           
  1389     0427                     l1060:	
  1390                           ;incstack = 0
  1391                           ; Regs used in _abs: [wreg+status,2+status,0]
  1392                           
  1393     0427  1BF8               	btfsc	abs@a+1,7
  1394     0428  2C2A               	goto	u731
  1395     0429  2C2B               	goto	u730
  1396     042A                     u731:
  1397     042A  2C2C               	goto	l1064
  1398     042B                     u730:
  1399     042B                     l1062:
  1400     042B  2C37               	goto	l661
  1401     042C                     l1064:
  1402     042C  0977               	comf	abs@a,w
  1403     042D  00F9               	movwf	??_abs
  1404     042E  0978               	comf	abs@a+1,w
  1405     042F  00FA               	movwf	??_abs+1
  1406     0430  0AF9               	incf	??_abs,f
  1407     0431  1903               	skipnz
  1408     0432  0AFA               	incf	??_abs+1,f
  1409     0433  0879               	movf	??_abs,w
  1410     0434  00F7               	movwf	?_abs
  1411     0435  087A               	movf	??_abs+1,w
  1412     0436  00F8               	movwf	?_abs+1
  1413     0437                     l661:
  1414     0437  0008               	return
  1415     0438                     __end_of_abs:
  1416                           
  1417                           	psect	text7
  1418     05A1                     __ptext7:	
  1419 ;; *************** function ___awmod *****************
  1420 ;; Defined at:
  1421 ;;		line 5 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/awmod.c"
  1422 ;; Parameters:    Size  Location     Type
  1423 ;;  divisor         2    0[COMMON] int 
  1424 ;;  dividend        2    2[COMMON] int 
  1425 ;; Auto vars:     Size  Location     Type
  1426 ;;  sign            1    6[COMMON] unsigned char 
  1427 ;;  counter         1    5[COMMON] unsigned char 
  1428 ;; Return value:  Size  Location     Type
  1429 ;;                  2    0[COMMON] int 
  1430 ;; Registers used:
  1431 ;;		wreg, status,2, status,0
  1432 ;; Tracked objects:
  1433 ;;		On entry : 0/0
  1434 ;;		On exit  : 0/0
  1435 ;;		Unchanged: 0/0
  1436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1437 ;;      Params:         4       0       0       0       0
  1438 ;;      Locals:         2       0       0       0       0
  1439 ;;      Temps:          1       0       0       0       0
  1440 ;;      Totals:         7       0       0       0       0
  1441 ;;Total ram usage:        7 bytes
  1442 ;; Hardware stack levels used: 1
  1443 ;; This function calls:
  1444 ;;		Nothing
  1445 ;; This function is called by:
  1446 ;;		_vfpfcnvrt
  1447 ;; This function uses a non-reentrant model
  1448 ;;
  1449                           
  1450     05A1                     ___awmod:	
  1451                           ;psect for function ___awmod
  1452                           
  1453     05A1                     l1008:	
  1454                           ;incstack = 0
  1455                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1456                           
  1457     05A1  01F6               	clrf	___awmod@sign
  1458     05A2                     l1010:
  1459     05A2  1FF3               	btfss	___awmod@dividend+1,7
  1460     05A3  2DA5               	goto	u601
  1461     05A4  2DA6               	goto	u600
  1462     05A5                     u601:
  1463     05A5  2DAD               	goto	l1016
  1464     05A6                     u600:
  1465     05A6                     l1012:
  1466     05A6  09F2               	comf	___awmod@dividend,f
  1467     05A7  09F3               	comf	___awmod@dividend+1,f
  1468     05A8  0AF2               	incf	___awmod@dividend,f
  1469     05A9  1903               	skipnz
  1470     05AA  0AF3               	incf	___awmod@dividend+1,f
  1471     05AB                     l1014:
  1472     05AB  01F6               	clrf	___awmod@sign
  1473     05AC  0AF6               	incf	___awmod@sign,f
  1474     05AD                     l1016:
  1475     05AD  1FF1               	btfss	___awmod@divisor+1,7
  1476     05AE  2DB0               	goto	u611
  1477     05AF  2DB1               	goto	u610
  1478     05B0                     u611:
  1479     05B0  2DB6               	goto	l1020
  1480     05B1                     u610:
  1481     05B1                     l1018:
  1482     05B1  09F0               	comf	___awmod@divisor,f
  1483     05B2  09F1               	comf	___awmod@divisor+1,f
  1484     05B3  0AF0               	incf	___awmod@divisor,f
  1485     05B4  1903               	skipnz
  1486     05B5  0AF1               	incf	___awmod@divisor+1,f
  1487     05B6                     l1020:
  1488     05B6  0870               	movf	___awmod@divisor,w
  1489     05B7  0471               	iorwf	___awmod@divisor+1,w
  1490     05B8  1903               	btfsc	3,2
  1491     05B9  2DBB               	goto	u621
  1492     05BA  2DBC               	goto	u620
  1493     05BB                     u621:
  1494     05BB  2DEB               	goto	l1038
  1495     05BC                     u620:
  1496     05BC                     l1022:
  1497     05BC  01F5               	clrf	___awmod@counter
  1498     05BD  0AF5               	incf	___awmod@counter,f
  1499     05BE  2DCA               	goto	l1028
  1500     05BF                     l1024:
  1501     05BF  3001               	movlw	1
  1502     05C0                     u635:
  1503     05C0  1003               	clrc
  1504     05C1  0DF0               	rlf	___awmod@divisor,f
  1505     05C2  0DF1               	rlf	___awmod@divisor+1,f
  1506     05C3  3EFF               	addlw	-1
  1507     05C4  1D03               	skipz
  1508     05C5  2DC0               	goto	u635
  1509     05C6                     l1026:
  1510     05C6  3001               	movlw	1
  1511     05C7  00F4               	movwf	??___awmod
  1512     05C8  0874               	movf	??___awmod,w
  1513     05C9  07F5               	addwf	___awmod@counter,f
  1514     05CA                     l1028:
  1515     05CA  1FF1               	btfss	___awmod@divisor+1,7
  1516     05CB  2DCD               	goto	u641
  1517     05CC  2DCE               	goto	u640
  1518     05CD                     u641:
  1519     05CD  2DBF               	goto	l1024
  1520     05CE                     u640:
  1521     05CE                     l1030:
  1522     05CE  0871               	movf	___awmod@divisor+1,w
  1523     05CF  0273               	subwf	___awmod@dividend+1,w
  1524     05D0  1D03               	skipz
  1525     05D1  2DD4               	goto	u655
  1526     05D2  0870               	movf	___awmod@divisor,w
  1527     05D3  0272               	subwf	___awmod@dividend,w
  1528     05D4                     u655:
  1529     05D4  1C03               	skipc
  1530     05D5  2DD7               	goto	u651
  1531     05D6  2DD8               	goto	u650
  1532     05D7                     u651:
  1533     05D7  2DDE               	goto	l1034
  1534     05D8                     u650:
  1535     05D8                     l1032:
  1536     05D8  0870               	movf	___awmod@divisor,w
  1537     05D9  02F2               	subwf	___awmod@dividend,f
  1538     05DA  0871               	movf	___awmod@divisor+1,w
  1539     05DB  1C03               	skipc
  1540     05DC  03F3               	decf	___awmod@dividend+1,f
  1541     05DD  02F3               	subwf	___awmod@dividend+1,f
  1542     05DE                     l1034:
  1543     05DE  3001               	movlw	1
  1544     05DF                     u665:
  1545     05DF  1003               	clrc
  1546     05E0  0CF1               	rrf	___awmod@divisor+1,f
  1547     05E1  0CF0               	rrf	___awmod@divisor,f
  1548     05E2  3EFF               	addlw	-1
  1549     05E3  1D03               	skipz
  1550     05E4  2DDF               	goto	u665
  1551     05E5                     l1036:
  1552     05E5  3001               	movlw	1
  1553     05E6  02F5               	subwf	___awmod@counter,f
  1554     05E7  1D03               	btfss	3,2
  1555     05E8  2DEA               	goto	u671
  1556     05E9  2DEB               	goto	u670
  1557     05EA                     u671:
  1558     05EA  2DCE               	goto	l1030
  1559     05EB                     u670:
  1560     05EB                     l1038:
  1561     05EB  0876               	movf	___awmod@sign,w
  1562     05EC  1903               	btfsc	3,2
  1563     05ED  2DEF               	goto	u681
  1564     05EE  2DF0               	goto	u680
  1565     05EF                     u681:
  1566     05EF  2DF5               	goto	l1042
  1567     05F0                     u680:
  1568     05F0                     l1040:
  1569     05F0  09F2               	comf	___awmod@dividend,f
  1570     05F1  09F3               	comf	___awmod@dividend+1,f
  1571     05F2  0AF2               	incf	___awmod@dividend,f
  1572     05F3  1903               	skipnz
  1573     05F4  0AF3               	incf	___awmod@dividend+1,f
  1574     05F5                     l1042:
  1575     05F5  0873               	movf	___awmod@dividend+1,w
  1576     05F6  00F1               	movwf	?___awmod+1
  1577     05F7  0872               	movf	___awmod@dividend,w
  1578     05F8  00F0               	movwf	?___awmod
  1579     05F9                     l313:
  1580     05F9  0008               	return
  1581     05FA                     __end_of___awmod:
  1582                           
  1583                           	psect	text8
  1584     05FA                     __ptext8:	
  1585 ;; *************** function ___awdiv *****************
  1586 ;; Defined at:
  1587 ;;		line 5 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/awdiv.c"
  1588 ;; Parameters:    Size  Location     Type
  1589 ;;  divisor         2    0[COMMON] int 
  1590 ;;  dividend        2    2[COMMON] int 
  1591 ;; Auto vars:     Size  Location     Type
  1592 ;;  quotient        2    7[COMMON] int 
  1593 ;;  sign            1    6[COMMON] unsigned char 
  1594 ;;  counter         1    5[COMMON] unsigned char 
  1595 ;; Return value:  Size  Location     Type
  1596 ;;                  2    0[COMMON] int 
  1597 ;; Registers used:
  1598 ;;		wreg, status,2, status,0
  1599 ;; Tracked objects:
  1600 ;;		On entry : 0/0
  1601 ;;		On exit  : 0/0
  1602 ;;		Unchanged: 0/0
  1603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1604 ;;      Params:         4       0       0       0       0
  1605 ;;      Locals:         4       0       0       0       0
  1606 ;;      Temps:          1       0       0       0       0
  1607 ;;      Totals:         9       0       0       0       0
  1608 ;;Total ram usage:        9 bytes
  1609 ;; Hardware stack levels used: 1
  1610 ;; This function calls:
  1611 ;;		Nothing
  1612 ;; This function is called by:
  1613 ;;		_vfpfcnvrt
  1614 ;; This function uses a non-reentrant model
  1615 ;;
  1616                           
  1617     05FA                     ___awdiv:	
  1618                           ;psect for function ___awdiv
  1619                           
  1620     05FA                     l964:	
  1621                           ;incstack = 0
  1622                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1623                           
  1624     05FA  01F6               	clrf	___awdiv@sign
  1625     05FB                     l966:
  1626     05FB  1FF1               	btfss	___awdiv@divisor+1,7
  1627     05FC  2DFE               	goto	u501
  1628     05FD  2DFF               	goto	u500
  1629     05FE                     u501:
  1630     05FE  2E06               	goto	l972
  1631     05FF                     u500:
  1632     05FF                     l968:
  1633     05FF  09F0               	comf	___awdiv@divisor,f
  1634     0600  09F1               	comf	___awdiv@divisor+1,f
  1635     0601  0AF0               	incf	___awdiv@divisor,f
  1636     0602  1903               	skipnz
  1637     0603  0AF1               	incf	___awdiv@divisor+1,f
  1638     0604                     l970:
  1639     0604  01F6               	clrf	___awdiv@sign
  1640     0605  0AF6               	incf	___awdiv@sign,f
  1641     0606                     l972:
  1642     0606  1FF3               	btfss	___awdiv@dividend+1,7
  1643     0607  2E09               	goto	u511
  1644     0608  2E0A               	goto	u510
  1645     0609                     u511:
  1646     0609  2E13               	goto	l978
  1647     060A                     u510:
  1648     060A                     l974:
  1649     060A  09F2               	comf	___awdiv@dividend,f
  1650     060B  09F3               	comf	___awdiv@dividend+1,f
  1651     060C  0AF2               	incf	___awdiv@dividend,f
  1652     060D  1903               	skipnz
  1653     060E  0AF3               	incf	___awdiv@dividend+1,f
  1654     060F                     l976:
  1655     060F  3001               	movlw	1
  1656     0610  00F4               	movwf	??___awdiv
  1657     0611  0874               	movf	??___awdiv,w
  1658     0612  06F6               	xorwf	___awdiv@sign,f
  1659     0613                     l978:
  1660     0613  01F7               	clrf	___awdiv@quotient
  1661     0614  01F8               	clrf	___awdiv@quotient+1
  1662     0615                     l980:
  1663     0615  0870               	movf	___awdiv@divisor,w
  1664     0616  0471               	iorwf	___awdiv@divisor+1,w
  1665     0617  1903               	btfsc	3,2
  1666     0618  2E1A               	goto	u521
  1667     0619  2E1B               	goto	u520
  1668     061A                     u521:
  1669     061A  2E52               	goto	l1000
  1670     061B                     u520:
  1671     061B                     l982:
  1672     061B  01F5               	clrf	___awdiv@counter
  1673     061C  0AF5               	incf	___awdiv@counter,f
  1674     061D  2E29               	goto	l988
  1675     061E                     l984:
  1676     061E  3001               	movlw	1
  1677     061F                     u535:
  1678     061F  1003               	clrc
  1679     0620  0DF0               	rlf	___awdiv@divisor,f
  1680     0621  0DF1               	rlf	___awdiv@divisor+1,f
  1681     0622  3EFF               	addlw	-1
  1682     0623  1D03               	skipz
  1683     0624  2E1F               	goto	u535
  1684     0625                     l986:
  1685     0625  3001               	movlw	1
  1686     0626  00F4               	movwf	??___awdiv
  1687     0627  0874               	movf	??___awdiv,w
  1688     0628  07F5               	addwf	___awdiv@counter,f
  1689     0629                     l988:
  1690     0629  1FF1               	btfss	___awdiv@divisor+1,7
  1691     062A  2E2C               	goto	u541
  1692     062B  2E2D               	goto	u540
  1693     062C                     u541:
  1694     062C  2E1E               	goto	l984
  1695     062D                     u540:
  1696     062D                     l990:
  1697     062D  3001               	movlw	1
  1698     062E                     u555:
  1699     062E  1003               	clrc
  1700     062F  0DF7               	rlf	___awdiv@quotient,f
  1701     0630  0DF8               	rlf	___awdiv@quotient+1,f
  1702     0631  3EFF               	addlw	-1
  1703     0632  1D03               	skipz
  1704     0633  2E2E               	goto	u555
  1705     0634  0871               	movf	___awdiv@divisor+1,w
  1706     0635  0273               	subwf	___awdiv@dividend+1,w
  1707     0636  1D03               	skipz
  1708     0637  2E3A               	goto	u565
  1709     0638  0870               	movf	___awdiv@divisor,w
  1710     0639  0272               	subwf	___awdiv@dividend,w
  1711     063A                     u565:
  1712     063A  1C03               	skipc
  1713     063B  2E3D               	goto	u561
  1714     063C  2E3E               	goto	u560
  1715     063D                     u561:
  1716     063D  2E45               	goto	l996
  1717     063E                     u560:
  1718     063E                     l992:
  1719     063E  0870               	movf	___awdiv@divisor,w
  1720     063F  02F2               	subwf	___awdiv@dividend,f
  1721     0640  0871               	movf	___awdiv@divisor+1,w
  1722     0641  1C03               	skipc
  1723     0642  03F3               	decf	___awdiv@dividend+1,f
  1724     0643  02F3               	subwf	___awdiv@dividend+1,f
  1725     0644                     l994:
  1726     0644  1477               	bsf	___awdiv@quotient,0
  1727     0645                     l996:
  1728     0645  3001               	movlw	1
  1729     0646                     u575:
  1730     0646  1003               	clrc
  1731     0647  0CF1               	rrf	___awdiv@divisor+1,f
  1732     0648  0CF0               	rrf	___awdiv@divisor,f
  1733     0649  3EFF               	addlw	-1
  1734     064A  1D03               	skipz
  1735     064B  2E46               	goto	u575
  1736     064C                     l998:
  1737     064C  3001               	movlw	1
  1738     064D  02F5               	subwf	___awdiv@counter,f
  1739     064E  1D03               	btfss	3,2
  1740     064F  2E51               	goto	u581
  1741     0650  2E52               	goto	u580
  1742     0651                     u581:
  1743     0651  2E2D               	goto	l990
  1744     0652                     u580:
  1745     0652                     l1000:
  1746     0652  0876               	movf	___awdiv@sign,w
  1747     0653  1903               	btfsc	3,2
  1748     0654  2E56               	goto	u591
  1749     0655  2E57               	goto	u590
  1750     0656                     u591:
  1751     0656  2E5C               	goto	l1004
  1752     0657                     u590:
  1753     0657                     l1002:
  1754     0657  09F7               	comf	___awdiv@quotient,f
  1755     0658  09F8               	comf	___awdiv@quotient+1,f
  1756     0659  0AF7               	incf	___awdiv@quotient,f
  1757     065A  1903               	skipnz
  1758     065B  0AF8               	incf	___awdiv@quotient+1,f
  1759     065C                     l1004:
  1760     065C  0878               	movf	___awdiv@quotient+1,w
  1761     065D  00F1               	movwf	?___awdiv+1
  1762     065E  0877               	movf	___awdiv@quotient,w
  1763     065F  00F0               	movwf	?___awdiv
  1764     0660                     l300:
  1765     0660  0008               	return
  1766     0661                     __end_of___awdiv:
  1767                           
  1768                           	psect	text9
  1769     04D5                     __ptext9:	
  1770 ;; *************** function ___usart_write_ln *****************
  1771 ;; Defined at:
  1772 ;;		line 61 in file "main.c"
  1773 ;; Parameters:    Size  Location     Type
  1774 ;;  data            1    wreg     PTR unsigned char 
  1775 ;;		 -> buffer(50), 
  1776 ;; Auto vars:     Size  Location     Type
  1777 ;;  data            1    8[COMMON] PTR unsigned char 
  1778 ;;		 -> buffer(50), 
  1779 ;;  i               2    6[COMMON] int 
  1780 ;; Return value:  Size  Location     Type
  1781 ;;                  1    wreg      void 
  1782 ;; Registers used:
  1783 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1784 ;; Tracked objects:
  1785 ;;		On entry : 0/0
  1786 ;;		On exit  : 0/0
  1787 ;;		Unchanged: 0/0
  1788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1789 ;;      Params:         0       0       0       0       0
  1790 ;;      Locals:         3       0       0       0       0
  1791 ;;      Temps:          1       0       0       0       0
  1792 ;;      Totals:         4       0       0       0       0
  1793 ;;Total ram usage:        4 bytes
  1794 ;; Hardware stack levels used: 1
  1795 ;; Hardware stack levels required when called: 1
  1796 ;; This function calls:
  1797 ;;		___write_char
  1798 ;;		_strlen
  1799 ;; This function is called by:
  1800 ;;		_main
  1801 ;; This function uses a non-reentrant model
  1802 ;;
  1803                           
  1804     04D5                     ___usart_write_ln:	
  1805                           ;psect for function ___usart_write_ln
  1806                           
  1807                           
  1808                           ;incstack = 0
  1809                           ; Regs used in ___usart_write_ln: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1810                           ;___usart_write_ln@data stored from wreg
  1811     04D5  00F8               	movwf	___usart_write_ln@data
  1812     04D6                     l1182:
  1813                           
  1814                           ;main.c: 62:     int i;;main.c: 63:     for(i=0; i<(strlen(data)); i++) {
  1815     04D6  01F6               	clrf	___usart_write_ln@i
  1816     04D7  01F7               	clrf	___usart_write_ln@i+1
  1817     04D8  2CEB               	goto	l1188
  1818     04D9                     l1184:
  1819                           
  1820                           ;main.c: 64:         __write_char(data[i]);
  1821     04D9  0876               	movf	___usart_write_ln@i,w
  1822     04DA  0778               	addwf	___usart_write_ln@data,w
  1823     04DB  00F5               	movwf	??___usart_write_ln
  1824     04DC  0875               	movf	??___usart_write_ln,w
  1825     04DD  0084               	movwf	4
  1826     04DE  1383               	bcf	3,7	;select IRP bank0
  1827     04DF  0800               	movf	0,w
  1828     04E0  120A  118A  2403  120A  118A  	fcall	___write_char
  1829     04E5                     l1186:
  1830                           
  1831                           ;main.c: 65:     }
  1832     04E5  3001               	movlw	1
  1833     04E6  07F6               	addwf	___usart_write_ln@i,f
  1834     04E7  1803               	skipnc
  1835     04E8  0AF7               	incf	___usart_write_ln@i+1,f
  1836     04E9  3000               	movlw	0
  1837     04EA  07F7               	addwf	___usart_write_ln@i+1,f
  1838     04EB                     l1188:
  1839     04EB  0878               	movf	___usart_write_ln@data,w
  1840     04EC  120A  118A  2438  120A  118A  	fcall	_strlen
  1841     04F1  0871               	movf	?_strlen+1,w
  1842     04F2  0277               	subwf	___usart_write_ln@i+1,w
  1843     04F3  1D03               	skipz
  1844     04F4  2CF7               	goto	u975
  1845     04F5  0870               	movf	?_strlen,w
  1846     04F6  0276               	subwf	___usart_write_ln@i,w
  1847     04F7                     u975:
  1848     04F7  1C03               	skipc
  1849     04F8  2CFA               	goto	u971
  1850     04F9  2CFB               	goto	u970
  1851     04FA                     u971:
  1852     04FA  2CD9               	goto	l1184
  1853     04FB                     u970:
  1854     04FB                     l1190:
  1855                           
  1856                           ;main.c: 66:     __write_char('\r');
  1857     04FB  300D               	movlw	13
  1858     04FC  120A  118A  2403  120A  118A  	fcall	___write_char
  1859     0501                     l44:
  1860     0501  0008               	return
  1861     0502                     __end_of___usart_write_ln:
  1862                           
  1863                           	psect	text10
  1864     0438                     __ptext10:	
  1865 ;; *************** function _strlen *****************
  1866 ;; Defined at:
  1867 ;;		line 5 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/strlen.c"
  1868 ;; Parameters:    Size  Location     Type
  1869 ;;  s               1    wreg     PTR const unsigned char 
  1870 ;;		 -> buffer(50), 
  1871 ;; Auto vars:     Size  Location     Type
  1872 ;;  s               1    4[COMMON] PTR const unsigned char 
  1873 ;;		 -> buffer(50), 
  1874 ;;  a               1    3[COMMON] PTR const unsigned char 
  1875 ;;		 -> buffer(50), 
  1876 ;; Return value:  Size  Location     Type
  1877 ;;                  2    0[COMMON] unsigned int 
  1878 ;; Registers used:
  1879 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1880 ;; Tracked objects:
  1881 ;;		On entry : 0/0
  1882 ;;		On exit  : 0/0
  1883 ;;		Unchanged: 0/0
  1884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1885 ;;      Params:         2       0       0       0       0
  1886 ;;      Locals:         2       0       0       0       0
  1887 ;;      Temps:          1       0       0       0       0
  1888 ;;      Totals:         5       0       0       0       0
  1889 ;;Total ram usage:        5 bytes
  1890 ;; Hardware stack levels used: 1
  1891 ;; This function calls:
  1892 ;;		Nothing
  1893 ;; This function is called by:
  1894 ;;		___usart_write_ln
  1895 ;; This function uses a non-reentrant model
  1896 ;;
  1897                           
  1898     0438                     _strlen:	
  1899                           ;psect for function _strlen
  1900                           
  1901                           
  1902                           ;incstack = 0
  1903                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
  1904                           ;strlen@s stored from wreg
  1905     0438  00F4               	movwf	strlen@s
  1906     0439                     l1118:
  1907     0439  0874               	movf	strlen@s,w
  1908     043A  00F3               	movwf	strlen@a
  1909     043B  2C40               	goto	l1122
  1910     043C                     l1120:
  1911     043C  3001               	movlw	1
  1912     043D  00F2               	movwf	??_strlen
  1913     043E  0872               	movf	??_strlen,w
  1914     043F  07F4               	addwf	strlen@s,f
  1915     0440                     l1122:
  1916     0440  0874               	movf	strlen@s,w
  1917     0441  0084               	movwf	4
  1918     0442  1383               	bcf	3,7	;select IRP bank0
  1919     0443  0800               	movf	0,w
  1920     0444  1D03               	btfss	3,2
  1921     0445  2C47               	goto	u851
  1922     0446  2C48               	goto	u850
  1923     0447                     u851:
  1924     0447  2C3C               	goto	l1120
  1925     0448                     u850:
  1926     0448                     l1124:
  1927     0448  0873               	movf	strlen@a,w
  1928     0449  0274               	subwf	strlen@s,w
  1929     044A  00F0               	movwf	?_strlen
  1930     044B  01F1               	clrf	?_strlen+1
  1931     044C  1BF0               	btfsc	?_strlen,7
  1932     044D  03F1               	decf	?_strlen+1,f
  1933     044E                     l690:
  1934     044E  0008               	return
  1935     044F                     __end_of_strlen:
  1936                           
  1937                           	psect	text11
  1938     0403                     __ptext11:	
  1939 ;; *************** function ___write_char *****************
  1940 ;; Defined at:
  1941 ;;		line 54 in file "main.c"
  1942 ;; Parameters:    Size  Location     Type
  1943 ;;  c               1    wreg     unsigned char 
  1944 ;; Auto vars:     Size  Location     Type
  1945 ;;  c               1    0[COMMON] unsigned char 
  1946 ;; Return value:  Size  Location     Type
  1947 ;;                  1    wreg      void 
  1948 ;; Registers used:
  1949 ;;		wreg
  1950 ;; Tracked objects:
  1951 ;;		On entry : 0/0
  1952 ;;		On exit  : 0/0
  1953 ;;		Unchanged: 0/0
  1954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1955 ;;      Params:         0       0       0       0       0
  1956 ;;      Locals:         1       0       0       0       0
  1957 ;;      Temps:          0       0       0       0       0
  1958 ;;      Totals:         1       0       0       0       0
  1959 ;;Total ram usage:        1 bytes
  1960 ;; Hardware stack levels used: 1
  1961 ;; This function calls:
  1962 ;;		Nothing
  1963 ;; This function is called by:
  1964 ;;		___usart_write_ln
  1965 ;; This function uses a non-reentrant model
  1966 ;;
  1967                           
  1968     0403                     ___write_char:	
  1969                           ;psect for function ___write_char
  1970                           
  1971                           
  1972                           ;incstack = 0
  1973                           ; Regs used in ___write_char: [wreg]
  1974                           ;___write_char@c stored from wreg
  1975     0403  00F0               	movwf	___write_char@c
  1976     0404                     l1114:
  1977     0404                     l35:	
  1978                           ;main.c: 57:     }
  1979                           
  1980                           
  1981                           ;main.c: 55:     while(!TXIF) {
  1982     0404  1283               	bcf	3,5	;RP0=0, select bank0
  1983     0405  1303               	bcf	3,6	;RP1=0, select bank0
  1984     0406  1E0C               	btfss	12,4	;volatile
  1985     0407  2C09               	goto	u841
  1986     0408  2C0A               	goto	u840
  1987     0409                     u841:
  1988     0409  2C04               	goto	l35
  1989     040A                     u840:
  1990     040A                     l1116:
  1991                           
  1992                           ;main.c: 58:     TXREG = c;
  1993     040A  0870               	movf	___write_char@c,w
  1994     040B  0099               	movwf	25	;volatile
  1995     040C                     l38:
  1996     040C  0008               	return
  1997     040D                     __end_of___write_char:
  1998                           
  1999                           	psect	text12
  2000     044F                     __ptext12:	
  2001 ;; *************** function ___set_baud_rate *****************
  2002 ;; Defined at:
  2003 ;;		line 47 in file "main.c"
  2004 ;; Parameters:    Size  Location     Type
  2005 ;;  baud_rate       2    6[BANK0 ] int 
  2006 ;; Auto vars:     Size  Location     Type
  2007 ;;		None
  2008 ;; Return value:  Size  Location     Type
  2009 ;;                  1    wreg      void 
  2010 ;; Registers used:
  2011 ;;		wreg, status,2, status,0, pclath, cstack
  2012 ;; Tracked objects:
  2013 ;;		On entry : 0/0
  2014 ;;		On exit  : 0/0
  2015 ;;		Unchanged: 0/0
  2016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2017 ;;      Params:         0       2       0       0       0
  2018 ;;      Locals:         0       0       0       0       0
  2019 ;;      Temps:          0       0       0       0       0
  2020 ;;      Totals:         0       2       0       0       0
  2021 ;;Total ram usage:        2 bytes
  2022 ;; Hardware stack levels used: 1
  2023 ;; Hardware stack levels required when called: 1
  2024 ;; This function calls:
  2025 ;;		___aldiv
  2026 ;; This function is called by:
  2027 ;;		_main
  2028 ;; This function uses a non-reentrant model
  2029 ;;
  2030                           
  2031     044F                     ___set_baud_rate:	
  2032                           ;psect for function ___set_baud_rate
  2033                           
  2034     044F                     l1180:	
  2035                           ;incstack = 0
  2036                           ; Regs used in ___set_baud_rate: [wreg+status,2+status,0+pclath+cstack]
  2037                           
  2038                           
  2039                           ;main.c: 51:     SPBRG = ((16000000 / 16) / baud_rate) - 1;
  2040     044F  1283               	bcf	3,5	;RP0=0, select bank0
  2041     0450  1303               	bcf	3,6	;RP1=0, select bank0
  2042     0451  084B               	movf	___set_baud_rate@baud_rate,w
  2043     0452  00F0               	movwf	___aldiv@divisor
  2044     0453  084C               	movf	___set_baud_rate@baud_rate+1,w
  2045     0454  00F1               	movwf	___aldiv@divisor+1
  2046     0455  3000               	movlw	0
  2047     0456  1BF1               	btfsc	___aldiv@divisor+1,7
  2048     0457  30FF               	movlw	255
  2049     0458  00F2               	movwf	___aldiv@divisor+2
  2050     0459  00F3               	movwf	___aldiv@divisor+3
  2051     045A  3000               	movlw	0
  2052     045B  00F7               	movwf	___aldiv@dividend+3
  2053     045C  300F               	movlw	15
  2054     045D  00F6               	movwf	___aldiv@dividend+2
  2055     045E  3042               	movlw	66
  2056     045F  00F5               	movwf	___aldiv@dividend+1
  2057     0460  3040               	movlw	64
  2058     0461  00F4               	movwf	___aldiv@dividend
  2059     0462  120A  118A  2661  120A  118A  	fcall	___aldiv
  2060     0467  0870               	movf	?___aldiv,w
  2061     0468  3EFF               	addlw	255
  2062     0469  1683               	bsf	3,5	;RP0=1, select bank1
  2063     046A  1303               	bcf	3,6	;RP1=0, select bank1
  2064     046B  0099               	movwf	25	;volatile
  2065     046C                     l32:
  2066     046C  0008               	return
  2067     046D                     __end_of___set_baud_rate:
  2068                           
  2069                           	psect	text13
  2070     0661                     __ptext13:	
  2071 ;; *************** function ___aldiv *****************
  2072 ;; Defined at:
  2073 ;;		line 5 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/aldiv.c"
  2074 ;; Parameters:    Size  Location     Type
  2075 ;;  divisor         4    0[COMMON] long 
  2076 ;;  dividend        4    4[COMMON] long 
  2077 ;; Auto vars:     Size  Location     Type
  2078 ;;  quotient        4    2[BANK0 ] long 
  2079 ;;  sign            1    1[BANK0 ] unsigned char 
  2080 ;;  counter         1    0[BANK0 ] unsigned char 
  2081 ;; Return value:  Size  Location     Type
  2082 ;;                  4    0[COMMON] long 
  2083 ;; Registers used:
  2084 ;;		wreg, status,2, status,0
  2085 ;; Tracked objects:
  2086 ;;		On entry : 0/0
  2087 ;;		On exit  : 0/0
  2088 ;;		Unchanged: 0/0
  2089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2090 ;;      Params:         8       0       0       0       0
  2091 ;;      Locals:         0       6       0       0       0
  2092 ;;      Temps:          1       0       0       0       0
  2093 ;;      Totals:         9       6       0       0       0
  2094 ;;Total ram usage:       15 bytes
  2095 ;; Hardware stack levels used: 1
  2096 ;; This function calls:
  2097 ;;		Nothing
  2098 ;; This function is called by:
  2099 ;;		___set_baud_rate
  2100 ;; This function uses a non-reentrant model
  2101 ;;
  2102                           
  2103     0661                     ___aldiv:	
  2104                           ;psect for function ___aldiv
  2105                           
  2106     0661                     l1128:	
  2107                           ;incstack = 0
  2108                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2109                           
  2110     0661  1283               	bcf	3,5	;RP0=0, select bank0
  2111     0662  1303               	bcf	3,6	;RP1=0, select bank0
  2112     0663  01C6               	clrf	___aldiv@sign
  2113     0664                     l1130:
  2114     0664  1FF3               	btfss	___aldiv@divisor+3,7
  2115     0665  2E67               	goto	u861
  2116     0666  2E68               	goto	u860
  2117     0667                     u861:
  2118     0667  2E75               	goto	l212
  2119     0668                     u860:
  2120     0668                     l1132:
  2121     0668  09F0               	comf	___aldiv@divisor,f
  2122     0669  09F1               	comf	___aldiv@divisor+1,f
  2123     066A  09F2               	comf	___aldiv@divisor+2,f
  2124     066B  09F3               	comf	___aldiv@divisor+3,f
  2125     066C  0AF0               	incf	___aldiv@divisor,f
  2126     066D  1903               	skipnz
  2127     066E  0AF1               	incf	___aldiv@divisor+1,f
  2128     066F  1903               	skipnz
  2129     0670  0AF2               	incf	___aldiv@divisor+2,f
  2130     0671  1903               	skipnz
  2131     0672  0AF3               	incf	___aldiv@divisor+3,f
  2132     0673  01C6               	clrf	___aldiv@sign
  2133     0674  0AC6               	incf	___aldiv@sign,f
  2134     0675                     l212:
  2135     0675  1FF7               	btfss	___aldiv@dividend+3,7
  2136     0676  2E78               	goto	u871
  2137     0677  2E79               	goto	u870
  2138     0678                     u871:
  2139     0678  2E88               	goto	l1138
  2140     0679                     u870:
  2141     0679                     l1134:
  2142     0679  09F4               	comf	___aldiv@dividend,f
  2143     067A  09F5               	comf	___aldiv@dividend+1,f
  2144     067B  09F6               	comf	___aldiv@dividend+2,f
  2145     067C  09F7               	comf	___aldiv@dividend+3,f
  2146     067D  0AF4               	incf	___aldiv@dividend,f
  2147     067E  1903               	skipnz
  2148     067F  0AF5               	incf	___aldiv@dividend+1,f
  2149     0680  1903               	skipnz
  2150     0681  0AF6               	incf	___aldiv@dividend+2,f
  2151     0682  1903               	skipnz
  2152     0683  0AF7               	incf	___aldiv@dividend+3,f
  2153     0684                     l1136:
  2154     0684  3001               	movlw	1
  2155     0685  00F8               	movwf	??___aldiv
  2156     0686  0878               	movf	??___aldiv,w
  2157     0687  06C6               	xorwf	___aldiv@sign,f
  2158     0688                     l1138:
  2159     0688  3000               	movlw	0
  2160     0689  00CA               	movwf	___aldiv@quotient+3
  2161     068A  3000               	movlw	0
  2162     068B  00C9               	movwf	___aldiv@quotient+2
  2163     068C  3000               	movlw	0
  2164     068D  00C8               	movwf	___aldiv@quotient+1
  2165     068E  3000               	movlw	0
  2166     068F  00C7               	movwf	___aldiv@quotient
  2167     0690                     l1140:
  2168     0690  0873               	movf	___aldiv@divisor+3,w
  2169     0691  0472               	iorwf	___aldiv@divisor+2,w
  2170     0692  0471               	iorwf	___aldiv@divisor+1,w
  2171     0693  0470               	iorwf	___aldiv@divisor,w
  2172     0694  1903               	skipnz
  2173     0695  2E97               	goto	u881
  2174     0696  2E98               	goto	u880
  2175     0697                     u881:
  2176     0697  2EE5               	goto	l1160
  2177     0698                     u880:
  2178     0698                     l1142:
  2179     0698  01C5               	clrf	___aldiv@counter
  2180     0699  0AC5               	incf	___aldiv@counter,f
  2181     069A  2EA8               	goto	l1146
  2182     069B                     l1144:
  2183     069B  3001               	movlw	1
  2184     069C  00F8               	movwf	??___aldiv
  2185     069D                     u895:
  2186     069D  1003               	clrc
  2187     069E  0DF0               	rlf	___aldiv@divisor,f
  2188     069F  0DF1               	rlf	___aldiv@divisor+1,f
  2189     06A0  0DF2               	rlf	___aldiv@divisor+2,f
  2190     06A1  0DF3               	rlf	___aldiv@divisor+3,f
  2191     06A2  0BF8               	decfsz	??___aldiv,f
  2192     06A3  2E9D               	goto	u895
  2193     06A4  3001               	movlw	1
  2194     06A5  00F8               	movwf	??___aldiv
  2195     06A6  0878               	movf	??___aldiv,w
  2196     06A7  07C5               	addwf	___aldiv@counter,f
  2197     06A8                     l1146:
  2198     06A8  1FF3               	btfss	___aldiv@divisor+3,7
  2199     06A9  2EAB               	goto	u901
  2200     06AA  2EAC               	goto	u900
  2201     06AB                     u901:
  2202     06AB  2E9B               	goto	l1144
  2203     06AC                     u900:
  2204     06AC                     l1148:
  2205     06AC  3001               	movlw	1
  2206     06AD  00F8               	movwf	??___aldiv
  2207     06AE                     u915:
  2208     06AE  1003               	clrc
  2209     06AF  0DC7               	rlf	___aldiv@quotient,f
  2210     06B0  0DC8               	rlf	___aldiv@quotient+1,f
  2211     06B1  0DC9               	rlf	___aldiv@quotient+2,f
  2212     06B2  0DCA               	rlf	___aldiv@quotient+3,f
  2213     06B3  0BF8               	decfsz	??___aldiv,f
  2214     06B4  2EAE               	goto	u915
  2215     06B5                     l1150:
  2216     06B5  0873               	movf	___aldiv@divisor+3,w
  2217     06B6  0277               	subwf	___aldiv@dividend+3,w
  2218     06B7  1D03               	skipz
  2219     06B8  2EC3               	goto	u925
  2220     06B9  0872               	movf	___aldiv@divisor+2,w
  2221     06BA  0276               	subwf	___aldiv@dividend+2,w
  2222     06BB  1D03               	skipz
  2223     06BC  2EC3               	goto	u925
  2224     06BD  0871               	movf	___aldiv@divisor+1,w
  2225     06BE  0275               	subwf	___aldiv@dividend+1,w
  2226     06BF  1D03               	skipz
  2227     06C0  2EC3               	goto	u925
  2228     06C1  0870               	movf	___aldiv@divisor,w
  2229     06C2  0274               	subwf	___aldiv@dividend,w
  2230     06C3                     u925:
  2231     06C3  1C03               	skipc
  2232     06C4  2EC6               	goto	u921
  2233     06C5  2EC7               	goto	u920
  2234     06C6                     u921:
  2235     06C6  2ED6               	goto	l1156
  2236     06C7                     u920:
  2237     06C7                     l1152:
  2238     06C7  0870               	movf	___aldiv@divisor,w
  2239     06C8  02F4               	subwf	___aldiv@dividend,f
  2240     06C9  0871               	movf	___aldiv@divisor+1,w
  2241     06CA  1C03               	skipc
  2242     06CB  0F71               	incfsz	___aldiv@divisor+1,w
  2243     06CC  02F5               	subwf	___aldiv@dividend+1,f
  2244     06CD  0872               	movf	___aldiv@divisor+2,w
  2245     06CE  1C03               	skipc
  2246     06CF  0F72               	incfsz	___aldiv@divisor+2,w
  2247     06D0  02F6               	subwf	___aldiv@dividend+2,f
  2248     06D1  0873               	movf	___aldiv@divisor+3,w
  2249     06D2  1C03               	skipc
  2250     06D3  0F73               	incfsz	___aldiv@divisor+3,w
  2251     06D4  02F7               	subwf	___aldiv@dividend+3,f
  2252     06D5                     l1154:
  2253     06D5  1447               	bsf	___aldiv@quotient,0
  2254     06D6                     l1156:
  2255     06D6  3001               	movlw	1
  2256     06D7                     u935:
  2257     06D7  1003               	clrc
  2258     06D8  0CF3               	rrf	___aldiv@divisor+3,f
  2259     06D9  0CF2               	rrf	___aldiv@divisor+2,f
  2260     06DA  0CF1               	rrf	___aldiv@divisor+1,f
  2261     06DB  0CF0               	rrf	___aldiv@divisor,f
  2262     06DC  3EFF               	addlw	-1
  2263     06DD  1D03               	skipz
  2264     06DE  2ED7               	goto	u935
  2265     06DF                     l1158:
  2266     06DF  3001               	movlw	1
  2267     06E0  02C5               	subwf	___aldiv@counter,f
  2268     06E1  1D03               	btfss	3,2
  2269     06E2  2EE4               	goto	u941
  2270     06E3  2EE5               	goto	u940
  2271     06E4                     u941:
  2272     06E4  2EAC               	goto	l1148
  2273     06E5                     u940:
  2274     06E5                     l1160:
  2275     06E5  0846               	movf	___aldiv@sign,w
  2276     06E6  1903               	btfsc	3,2
  2277     06E7  2EE9               	goto	u951
  2278     06E8  2EEA               	goto	u950
  2279     06E9                     u951:
  2280     06E9  2EF5               	goto	l1164
  2281     06EA                     u950:
  2282     06EA                     l1162:
  2283     06EA  09C7               	comf	___aldiv@quotient,f
  2284     06EB  09C8               	comf	___aldiv@quotient+1,f
  2285     06EC  09C9               	comf	___aldiv@quotient+2,f
  2286     06ED  09CA               	comf	___aldiv@quotient+3,f
  2287     06EE  0AC7               	incf	___aldiv@quotient,f
  2288     06EF  1903               	skipnz
  2289     06F0  0AC8               	incf	___aldiv@quotient+1,f
  2290     06F1  1903               	skipnz
  2291     06F2  0AC9               	incf	___aldiv@quotient+2,f
  2292     06F3  1903               	skipnz
  2293     06F4  0ACA               	incf	___aldiv@quotient+3,f
  2294     06F5                     l1164:
  2295     06F5  084A               	movf	___aldiv@quotient+3,w
  2296     06F6  00F3               	movwf	?___aldiv+3
  2297     06F7  0849               	movf	___aldiv@quotient+2,w
  2298     06F8  00F2               	movwf	?___aldiv+2
  2299     06F9  0848               	movf	___aldiv@quotient+1,w
  2300     06FA  00F1               	movwf	?___aldiv+1
  2301     06FB  0847               	movf	___aldiv@quotient,w
  2302     06FC  00F0               	movwf	?___aldiv
  2303     06FD                     l222:
  2304     06FD  0008               	return
  2305     06FE                     __end_of___aldiv:
  2306                           
  2307                           	psect	text14
  2308     040D                     __ptext14:	
  2309 ;; *************** function ___init_usart *****************
  2310 ;; Defined at:
  2311 ;;		line 18 in file "main.c"
  2312 ;; Parameters:    Size  Location     Type
  2313 ;;		None
  2314 ;; Auto vars:     Size  Location     Type
  2315 ;;		None
  2316 ;; Return value:  Size  Location     Type
  2317 ;;                  1    wreg      void 
  2318 ;; Registers used:
  2319 ;;		None
  2320 ;; Tracked objects:
  2321 ;;		On entry : 0/0
  2322 ;;		On exit  : 0/0
  2323 ;;		Unchanged: 0/0
  2324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2325 ;;      Params:         0       0       0       0       0
  2326 ;;      Locals:         0       0       0       0       0
  2327 ;;      Temps:          0       0       0       0       0
  2328 ;;      Totals:         0       0       0       0       0
  2329 ;;Total ram usage:        0 bytes
  2330 ;; Hardware stack levels used: 1
  2331 ;; This function calls:
  2332 ;;		Nothing
  2333 ;; This function is called by:
  2334 ;;		_main
  2335 ;; This function uses a non-reentrant model
  2336 ;;
  2337                           
  2338     040D                     ___init_usart:	
  2339                           ;psect for function ___init_usart
  2340                           
  2341     040D                     l1178:	
  2342                           ;incstack = 0
  2343                           ; Regs used in ___init_usart: []
  2344                           
  2345                           
  2346                           ;main.c: 28:     TXSTAbits.TX9 = 0;
  2347     040D  1683               	bsf	3,5	;RP0=1, select bank1
  2348     040E  1303               	bcf	3,6	;RP1=0, select bank1
  2349     040F  1318               	bcf	24,6	;volatile
  2350                           
  2351                           ;main.c: 29:     TXSTAbits.TXEN = 1;
  2352     0410  1698               	bsf	24,5	;volatile
  2353                           
  2354                           ;main.c: 30:     TXSTAbits.SYNC = 0;
  2355     0411  1218               	bcf	24,4	;volatile
  2356                           
  2357                           ;main.c: 31:     TXSTAbits.BRGH = 1;
  2358     0412  1518               	bsf	24,2	;volatile
  2359                           
  2360                           ;main.c: 42:     RCSTAbits.SPEN = 1;
  2361     0413  1283               	bcf	3,5	;RP0=0, select bank0
  2362     0414  1303               	bcf	3,6	;RP1=0, select bank0
  2363     0415  1798               	bsf	24,7	;volatile
  2364                           
  2365                           ;main.c: 43:     RCSTAbits.RX9 = 0;
  2366     0416  1318               	bcf	24,6	;volatile
  2367                           
  2368                           ;main.c: 44:     RCSTAbits.CREN = 1;
  2369     0417  1618               	bsf	24,4	;volatile
  2370     0418                     l29:
  2371     0418  0008               	return
  2372     0419                     __end_of___init_usart:
  2373                           
  2374                           	psect	text15
  2375     0419                     __ptext15:	
  2376 ;; *************** function ___init_adc *****************
  2377 ;; Defined at:
  2378 ;;		line 69 in file "main.c"
  2379 ;; Parameters:    Size  Location     Type
  2380 ;;		None
  2381 ;; Auto vars:     Size  Location     Type
  2382 ;;		None
  2383 ;; Return value:  Size  Location     Type
  2384 ;;                  1    wreg      void 
  2385 ;; Registers used:
  2386 ;;		wreg, status,2, status,0
  2387 ;; Tracked objects:
  2388 ;;		On entry : 0/0
  2389 ;;		On exit  : 0/0
  2390 ;;		Unchanged: 0/0
  2391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2392 ;;      Params:         0       0       0       0       0
  2393 ;;      Locals:         0       0       0       0       0
  2394 ;;      Temps:          0       0       0       0       0
  2395 ;;      Totals:         0       0       0       0       0
  2396 ;;Total ram usage:        0 bytes
  2397 ;; Hardware stack levels used: 1
  2398 ;; This function calls:
  2399 ;;		Nothing
  2400 ;; This function is called by:
  2401 ;;		_main
  2402 ;; This function uses a non-reentrant model
  2403 ;;
  2404                           
  2405     0419                     ___init_adc:	
  2406                           ;psect for function ___init_adc
  2407                           
  2408     0419                     l1192:	
  2409                           ;incstack = 0
  2410                           ; Regs used in ___init_adc: [wreg+status,2+status,0]
  2411                           
  2412                           
  2413                           ;main.c: 70:     ADCON0bits.ADCS = 0b00;
  2414     0419  303F               	movlw	-193
  2415     041A  1283               	bcf	3,5	;RP0=0, select bank0
  2416     041B  1303               	bcf	3,6	;RP1=0, select bank0
  2417     041C  059F               	andwf	31,f	;volatile
  2418                           
  2419                           ;main.c: 71:     ADCON0bits.CHS = 0b000;
  2420     041D  30C7               	movlw	-57
  2421     041E  059F               	andwf	31,f	;volatile
  2422     041F                     l1194:
  2423                           
  2424                           ;main.c: 72:     ADCON0bits.ADON = 0;
  2425     041F  101F               	bcf	31,0	;volatile
  2426     0420                     l1196:
  2427                           
  2428                           ;main.c: 74:     ADCON1bits.ADFM = 1;
  2429     0420  1683               	bsf	3,5	;RP0=1, select bank1
  2430     0421  1303               	bcf	3,6	;RP1=0, select bank1
  2431     0422  179F               	bsf	31,7	;volatile
  2432     0423                     l1198:
  2433                           
  2434                           ;main.c: 75:     ADCON1bits.ADCS2 = 0;
  2435     0423  131F               	bcf	31,6	;volatile
  2436                           
  2437                           ;main.c: 76:     ADCON1bits.PCFG = 0b0000;
  2438     0424  30F0               	movlw	-16
  2439     0425  059F               	andwf	31,f	;volatile
  2440     0426                     l47:
  2441     0426  0008               	return
  2442     0427                     __end_of___init_adc:
  2443                           
  2444                           	psect	text16
  2445     04AD                     __ptext16:	
  2446 ;; *************** function ___adc_read *****************
  2447 ;; Defined at:
  2448 ;;		line 79 in file "main.c"
  2449 ;; Parameters:    Size  Location     Type
  2450 ;;  adc_channel     2    0[COMMON] int 
  2451 ;; Auto vars:     Size  Location     Type
  2452 ;;  adc_value       2    4[COMMON] int 
  2453 ;; Return value:  Size  Location     Type
  2454 ;;                  2    0[COMMON] int 
  2455 ;; Registers used:
  2456 ;;		wreg, status,2, status,0
  2457 ;; Tracked objects:
  2458 ;;		On entry : 0/0
  2459 ;;		On exit  : 0/0
  2460 ;;		Unchanged: 0/0
  2461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2462 ;;      Params:         2       0       0       0       0
  2463 ;;      Locals:         2       0       0       0       0
  2464 ;;      Temps:          2       0       0       0       0
  2465 ;;      Totals:         6       0       0       0       0
  2466 ;;Total ram usage:        6 bytes
  2467 ;; Hardware stack levels used: 1
  2468 ;; This function calls:
  2469 ;;		Nothing
  2470 ;; This function is called by:
  2471 ;;		_main
  2472 ;; This function uses a non-reentrant model
  2473 ;;
  2474                           
  2475     04AD                     ___adc_read:	
  2476                           ;psect for function ___adc_read
  2477                           
  2478     04AD                     l1200:	
  2479                           ;incstack = 0
  2480                           ; Regs used in ___adc_read: [wreg+status,2+status,0]
  2481                           
  2482                           
  2483                           ;main.c: 80:     ADCON0bits.ADON = 1;
  2484     04AD  1283               	bcf	3,5	;RP0=0, select bank0
  2485     04AE  1303               	bcf	3,6	;RP1=0, select bank0
  2486     04AF  141F               	bsf	31,0	;volatile
  2487     04B0                     l1202:
  2488                           
  2489                           ;main.c: 81:     ADCON0bits.CHS = adc_channel;
  2490     04B0  0870               	movf	___adc_read@adc_channel,w
  2491     04B1  00F2               	movwf	??___adc_read
  2492     04B2  0DF2               	rlf	??___adc_read,f
  2493     04B3  0DF2               	rlf	??___adc_read,f
  2494     04B4  0DF2               	rlf	??___adc_read,f
  2495     04B5  081F               	movf	31,w	;volatile
  2496     04B6  0672               	xorwf	??___adc_read,w
  2497     04B7  39C7               	andlw	-57
  2498     04B8  0672               	xorwf	??___adc_read,w
  2499     04B9  009F               	movwf	31	;volatile
  2500     04BA                     l1204:
  2501                           
  2502                           ;main.c: 82:     _delay((unsigned long)((10)*(16000000/4000.0)));
  2503     04BA  3034               	movlw	52
  2504     04BB  00F3               	movwf	??___adc_read+1
  2505     04BC  30F1               	movlw	241
  2506     04BD  00F2               	movwf	??___adc_read
  2507     04BE                     u1007:
  2508     04BE  0BF2               	decfsz	??___adc_read,f
  2509     04BF  2CBE               	goto	u1007
  2510     04C0  0BF3               	decfsz	??___adc_read+1,f
  2511     04C1  2CBE               	goto	u1007
  2512     04C2  2CC3               	nop2
  2513     04C3                     l1206:
  2514                           
  2515                           ;main.c: 83:     ADCON0bits.GO = 1;
  2516     04C3  1283               	bcf	3,5	;RP0=0, select bank0
  2517     04C4  1303               	bcf	3,6	;RP1=0, select bank0
  2518     04C5  151F               	bsf	31,2	;volatile
  2519     04C6                     l50:	
  2520                           ;main.c: 86:     }
  2521                           
  2522                           
  2523                           ;main.c: 84:     while(ADCON0bits.GO_DONE == 1) {
  2524     04C6  191F               	btfsc	31,2	;volatile
  2525     04C7  2CC9               	goto	u981
  2526     04C8  2CCA               	goto	u980
  2527     04C9                     u981:
  2528     04C9  2CC6               	goto	l50
  2529     04CA                     u980:
  2530     04CA                     l1208:
  2531                           
  2532                           ;main.c: 87:     int adc_value = (ADRESH << 8) + (ADRESL);
  2533     04CA  081E               	movf	30,w	;volatile
  2534     04CB  00F5               	movwf	___adc_read@adc_value+1
  2535     04CC  1683               	bsf	3,5	;RP0=1, select bank1
  2536     04CD  1303               	bcf	3,6	;RP1=0, select bank1
  2537     04CE  081E               	movf	30,w	;volatile
  2538     04CF  00F4               	movwf	___adc_read@adc_value
  2539                           
  2540                           ;main.c: 88:     return adc_value;
  2541     04D0  0875               	movf	___adc_read@adc_value+1,w
  2542     04D1  00F1               	movwf	?___adc_read+1
  2543     04D2  0874               	movf	___adc_read@adc_value,w
  2544     04D3  00F0               	movwf	?___adc_read
  2545     04D4                     l53:
  2546     04D4  0008               	return
  2547     04D5                     __end_of___adc_read:
  2548     007E                     btemp	set	126	;btemp
  2549     007E                     wtemp0	set	126
  2550                           
  2551                           	psect	idloc
  2552                           
  2553                           ;Config register IDLOC0 @ 0x2000
  2554                           ;	unspecified, using default values
  2555     2000                     	org	8192
  2556     2000  3FFF               	dw	16383
  2557                           
  2558                           ;Config register IDLOC1 @ 0x2001
  2559                           ;	unspecified, using default values
  2560     2001                     	org	8193
  2561     2001  3FFF               	dw	16383
  2562                           
  2563                           ;Config register IDLOC2 @ 0x2002
  2564                           ;	unspecified, using default values
  2565     2002                     	org	8194
  2566     2002  3FFF               	dw	16383
  2567                           
  2568                           ;Config register IDLOC3 @ 0x2003
  2569                           ;	unspecified, using default values
  2570     2003                     	org	8195
  2571     2003  3FFF               	dw	16383
  2572                           
  2573                           	psect	config
  2574                           
  2575                           ;Config register CONFIG @ 0x2007
  2576                           ;	Oscillator Selection bits
  2577                           ;	FOSC = HS, HS oscillator
  2578                           ;	Watchdog Timer Enable bit
  2579                           ;	WDTE = OFF, WDT disabled
  2580                           ;	Power-up Timer Enable bit
  2581                           ;	PWRTE = OFF, PWRT disabled
  2582                           ;	Brown-out Reset Enable bit
  2583                           ;	BOREN = ON, BOR enabled
  2584                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  2585                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  2586                           ;	Data EEPROM Memory Code Protection bit
  2587                           ;	CPD = OFF, Data EEPROM code protection off
  2588                           ;	Flash Program Memory Write Enable bits
  2589                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  2590                           ;	In-Circuit Debugger Mode bit
  2591                           ;	DEBUG = 0x1, unprogrammed default
  2592                           ;	Flash Program Memory Code Protection bit
  2593                           ;	CP = OFF, Code protection off
  2594     2007                     	org	8199
  2595     2007  3F7A               	dw	16250

Data Sizes:
    Strings     18
    Constant    0
    Data        0
    BSS         87
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     35      72
    BANK1            80      0      50
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(1) Largest target is 0

    f$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(1) Largest target is 0

    S696$buffer	PTR unsigned char  size(1) Largest target is 0

    S696$source	PTR const unsigned char  size(1) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 18
		 -> STR_1(CODE[18]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 50
		 -> buffer(BANK1[50]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 50
		 -> buffer(BANK1[50]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 50
		 -> buffer(BANK1[50]), 

    __usart_write_ln@data	PTR unsigned char  size(1) Largest target is 50
		 -> buffer(BANK1[50]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 18
		 -> STR_1(CODE[18]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(BANK0[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 18
		 -> STR_1(CODE[18]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 18
		 -> STR_1(CODE[18]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(BANK0[11]), 


Critical Paths under _main in COMMON

    _main->_sprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_abs
    _abs->___awmod
    ___usart_write_ln->_strlen
    ___set_baud_rate->___aldiv

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    ___set_baud_rate->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    4120
                                             30 BANK0      5     5      0
                         ___adc_read
                         ___init_adc
                       ___init_usart
                    ___set_baud_rate
                   ___usart_write_ln
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             19    16      3    3158
                                             13 COMMON     1     1      0
                                             14 BANK0     16    13      3
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             4     2      2    2850
                                             10 BANK0      4     2      2
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           12    10      2    2543
                                             11 COMMON     2     0      2
                                              0 BANK0     10    10      0
                            ___awdiv
                            ___awmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                8     5      3     782
                                              0 COMMON     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     142
                                              7 COMMON     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4     448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4     452
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (1) ___usart_write_ln                                     4     4      0     268
                                              5 COMMON     4     4      0
                       ___write_char
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               5     3      2     123
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (2) ___write_char                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___set_baud_rate                                      2     0      2     550
                                              6 BANK0      2     0      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) ___init_usart                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___init_adc                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___adc_read                                           6     4      2     121
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___adc_read
   ___init_adc
   ___init_usart
   ___set_baud_rate
     ___aldiv
   ___usart_write_ln
     ___write_char
     _strlen
   _sprintf
     _vfprintf
       _vfpfcnvrt
         ___awdiv
         ___awmod
         _abs
           ___awmod (ARG)
         _fputc
           _putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      88       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     23      48       5       90.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      32       7       62.5%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      88      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Oct 18 22:05:50 2023

                        pc 0002                         l32 046C                         l50 04C6  
                       l35 0404                         l44 0501                         l53 04D4  
                       l29 0418                         l38 040C                         l47 0426  
             ___awdiv@sign 0076                         fsr 0004                        l212 0675  
                      l300 0660                        l222 06FD                        l313 05F9  
                      l610 048B                        l661 0437                        l654 04AC  
                      l648 07EA                        l673 05A0                        l690 044E  
                      l684 03FA                        l970 0604                        l980 0615  
                      l972 0606                        l964 05FA                        l990 062D  
                      l982 061B                        l974 060A                        l966 05FB  
                      l992 063E                        l984 061E                        l976 060F  
                      l968 05FF                        l994 0644                        l986 0625  
                      l978 0613                        l996 0645                        l988 0629  
                      l998 064C                        u500 05FF                        u501 05FE  
                      u510 060A                        u511 0609                        u520 061B  
                      u600 05A6                        u521 061A                        u601 05A5  
                      u610 05B1                        u611 05B0                        u540 062D  
                      u620 05BC                        u700 0555                        u541 062C  
                      u621 05BB                        u701 0554                        u710 056B  
                      u535 061F                        u711 056A                        u560 063E  
                      u640 05CE                        u720 0589                        u800 0797  
                      u561 063D                        u641 05CD                        u721 0588  
                      u801 0796                        u650 05D8                        u730 042B  
                      u810 079C                        u555 062E                        u651 05D7  
                      u635 05C0                        u731 042A                        u811 079B  
                      u900 06AC                        u580 0652                        u820 07A1  
                      u740 0710                        u901 06AB                        u581 0651  
                      u565 063A                        u725 0585                        u821 07A0  
                      u741 070F                        u590 0657                        u670 05EB  
                      u830 07C8                        u750 0731                        u591 0656  
                      u575 0646                        u671 05EA                        u655 05D4  
                      u831 07C7                        u751 0730                        u920 06C7  
                      u840 040A                        u680 05F0                        u760 073D  
                      u921 06C6                        u841 0409                        u681 05EF  
                      u665 05DF                        u761 073C                        u850 0448  
                      u690 0550                        u770 0756                        u915 06AE  
                      u851 0447                        u691 054F                        u771 0754  
                      u940 06E5                        u860 0668                        u780 0757  
                      u941 06E4                        u925 06C3                        u861 0667  
                      u950 06EA                        u870 0679                        u790 0792  
                      u951 06E9                        u935 06D7                        u871 0678  
                      u791 0791                        u880 0698                        u960 04AA  
                      u881 0697                        u961 04A9                        u970 04FB  
                      u971 04FA                        u980 04CA                        u981 04C9  
                      u895 069D                        u975 04F7                        u997 0540  
                      _abs 0427                        fsr0 0004                        indf 0000  
             ___awmod@sign 0076                       l1000 0652                       l1002 0657  
                     l1010 05A2                       l1004 065C                       l1020 05B6  
                     l1012 05A6                       l1100 07BC                       l1030 05CE  
                     l1022 05BC                       l1014 05AB                       l1102 07C2  
                     l1200 04AD                       l1120 043C                       l1040 05F0  
                     l1032 05D8                       l1024 05BF                       l1016 05AD  
                     l1008 05A1                       l1104 07C9                       l1202 04B0  
                     l1130 0664                       l1114 0404                       l1122 0440  
                     l1042 05F5                       l1034 05DE                       l1026 05C6  
                     l1018 05B1                       l1050 0555                       ?_abs 0077  
                     l1204 04BA                       l1140 0690                       l1132 0668  
                     l1116 040A                       l1124 0448                       l1036 05E5  
                     l1028 05CA                       l1060 0427                       l1052 055C  
                     l1108 07D3                       l1220 0482                       l1212 0470  
                     l1206 04C3                       l1150 06B5                       l1142 0698  
                     l1134 0679                       l1118 0439                       l1038 05EB  
                     l1062 042B                       l1054 056B                       l1046 054B  
                     l1070 0710                       l1214 0474                       l1230 0517  
                     l1208 04CA                       l1152 06C7                       l1144 069B  
                     l1160 06E5                       l1136 0684                       l1128 0661  
                     l1064 042C                       l1056 0589                       l1048 0550  
                     l1080 073D                       l1072 0716                       l1216 0476  
                     l1232 0526                       l1224 0502                       l1162 06EA  
                     l1154 06D5                       l1146 06A8                       l1138 0688  
                     l1090 0792                       l1082 074F                       l1074 071D  
                     l1170 0492                       l1218 0478                       l1234 0532  
                     l1226 0507                       l1164 06F5                       l1156 06D6  
                     l1148 06AC                       l1180 044F                       l1092 0797  
                     l1084 0751                       l1076 0725                       l1068 0701  
                     l1172 049C                       l1228 050C                       l1158 06DF  
                     l1190 04FB                       l1182 04D6                       l1094 079C  
                     l1086 0758                       l1078 0731                       l1174 04AA  
                     l1192 0419                       l1184 04D9                       l1096 07A1  
                     l1088 0777                       l1168 048F                       l1194 041F  
                     l1178 040D                       l1186 04E5                       l1098 07AA  
                     l1196 0420                       l1188 04EB                       l1198 0423  
                     STR_1 0009                       u1007 04BE                       _TXIF 0064  
                     abs@a 0077                       _dbuf 0020                       _main 0502  
                     _prec 0042                       btemp 007E   __end_of___usart_write_ln 0502  
                     start 0000               ___init_usart 040D                      ??_abs 0079  
          __end_of___aldiv 06FE                      ?_main 0070            __end_of___awdiv 0661  
          __end_of___awmod 05FA            ___awdiv@divisor 0070            ___awdiv@counter 0075  
             vfpfcnvrt@fmt 007B                      _SPBRG 0099                      _TXREG 0019  
                    _flags 0044                      _fputc 054B                      _width 0040  
                    _putch 03FA                      pclath 000A                      status 0003  
                    wtemp0 007E            __end_of_sprintf 048C              main@adc_value 0066  
         ?___set_baud_rate 004B            __initialization 07EB               __end_of_main 054B  
                   ??_main 0063                     ?_fputc 0070                     _ADRESH 001E  
                   _ADRESL 009E           ___awdiv@dividend 0072                     ?_putch 0070  
            vfpfcnvrt@done 0047               ___write_char 0403               vfprintf@cfmt 0052  
                ??___aldiv 0078                  ??___awdiv 0074                  ??___awmod 0074  
                   _buffer 00A0           ___awdiv@quotient 0077            ___awmod@divisor 0070  
          ___awmod@counter 0075                     _strlen 0438                     fputc@c 0070  
               ___adc_read 04AD                     putch@c 0070           __end_of_vfprintf 04AD  
                ??_sprintf 007D  ___set_baud_rate@baud_rate 004B       ___adc_read@adc_value 0074  
  __end_of__initialization 07FC                 ___init_adc 0419             __pcstackCOMMON 0070  
            __end_of_fputc 05A1              __end_of_putch 03FB         ___usart_write_ln@i 0076  
                  ??_fputc 0073                    ??_putch 0070                 __pbssBANK0 0020  
               __pbssBANK1 00A0          ?___usart_write_ln 0070      ___usart_write_ln@data 0078  
               __pmaintext 0502         ??___usart_write_ln 0075                    ?_strlen 0070  
              ?___adc_read 0070                 __stringtab 0003                ?___init_adc 0070  
                  ___aldiv 0661                    ___awdiv 05FA                    ___awmod 05A1  
                ?_vfprintf 004F                    __ptext1 046D                    __ptext2 048C  
                  __ptext3 06FE                    __ptext4 054B                    __ptext5 03FA  
                  __ptext6 0427                    __ptext7 05A1                    __ptext8 05FA  
                  __ptext9 04D5           ___awmod@dividend 0072           ___aldiv@dividend 0074  
                  _sprintf 046D                    clrloop0 03FC       end_of_initialization 07FC  
                  fputc@fp 0072          __end_of_vfpfcnvrt 07EB                  _RCSTAbits 0018  
         ___aldiv@quotient 0047           vfpfcnvrt@convarg 004A                 ??_vfprintf 007D  
                  strlen@a 0073                    strlen@s 0074                  _TXSTAbits 0098  
              vfpfcnvrt@ap 007C                vfpfcnvrt@cp 0049                vfpfcnvrt@fp 0048  
           __end_of_strlen 044F        start_initialization 07EB                __end_of_abs 0438  
            ?___init_usart 0070                vfprintf@fmt 004F                   ??_strlen 0072  
             ??___adc_read 0072                  ___latbits 0002              __pcstackBANK0 0045  
        ??___set_baud_rate 0079             ??___init_usart 0070               ??___init_adc 0070  
                 ?___aldiv 0070         __end_of___adc_read 04D5                   ?___awdiv 0070  
                 ?___awmod 0070                  __pstrings 0003         __end_of___init_adc 0427  
                 ?_sprintf 0053            ___aldiv@divisor 0070            ___aldiv@counter 0045  
                clear_ram0 03FB              ?___write_char 0070                  _vfpfcnvrt 06FE  
               _ADCON0bits 001F                __stringbase 0008                 _ADCON1bits 009F  
               vfpfcnvrt@c 004E             ___write_char@c 0070             ??___write_char 0070  
               vfprintf@ap 0050                 vfprintf@fp 0051                 ?_vfpfcnvrt 007B  
       __end_of__stringtab 0009           ___usart_write_ln 04D5                 sprintf@fmt 0053  
     __end_of___init_usart 0419                   __ptext10 0438                   __ptext11 0403  
                 __ptext12 044F                   __ptext13 0661                   __ptext14 040D  
                 __ptext15 0419                   __ptext16 04AD                   _vfprintf 048C  
          ___set_baud_rate 044F                  sprintf@ap 0056                  stringcode 0003  
              ??_vfpfcnvrt 0045                   sprintf@f 0058                   sprintf@s 0057  
     __end_of___write_char 040D                   stringdir 0003                   stringtab 0003  
             ___aldiv@sign 0046     ___adc_read@adc_channel 0070    __end_of___set_baud_rate 046D  
