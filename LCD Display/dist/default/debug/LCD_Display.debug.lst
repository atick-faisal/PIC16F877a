

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Oct 18 22:05:05 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text7,local,class=CODE,merge=1,delta=2
    15                           	psect	text8,local,class=CODE,merge=1,delta=2
    16                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    18                           	dabs	1,0x7E,2
    19     0000                     
    20                           ; Generated 22/03/2023 GMT
    21                           ; 
    22                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution. Publication is not required when
    36                           ;        this file is used in an embedded application.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F877A Definitions
    52                           ; 
    53                           ; SFR Addresses
    54     0000                     	;# 
    55     0001                     	;# 
    56     0002                     	;# 
    57     0003                     	;# 
    58     0004                     	;# 
    59     0005                     	;# 
    60     0006                     	;# 
    61     0007                     	;# 
    62     0008                     	;# 
    63     0009                     	;# 
    64     000A                     	;# 
    65     000B                     	;# 
    66     000C                     	;# 
    67     000D                     	;# 
    68     000E                     	;# 
    69     000E                     	;# 
    70     000F                     	;# 
    71     0010                     	;# 
    72     0011                     	;# 
    73     0012                     	;# 
    74     0013                     	;# 
    75     0014                     	;# 
    76     0015                     	;# 
    77     0015                     	;# 
    78     0016                     	;# 
    79     0017                     	;# 
    80     0018                     	;# 
    81     0019                     	;# 
    82     001A                     	;# 
    83     001B                     	;# 
    84     001B                     	;# 
    85     001C                     	;# 
    86     001D                     	;# 
    87     001E                     	;# 
    88     001F                     	;# 
    89     0081                     	;# 
    90     0085                     	;# 
    91     0086                     	;# 
    92     0087                     	;# 
    93     0088                     	;# 
    94     0089                     	;# 
    95     008C                     	;# 
    96     008D                     	;# 
    97     008E                     	;# 
    98     0091                     	;# 
    99     0092                     	;# 
   100     0093                     	;# 
   101     0094                     	;# 
   102     0098                     	;# 
   103     0099                     	;# 
   104     009C                     	;# 
   105     009D                     	;# 
   106     009E                     	;# 
   107     009F                     	;# 
   108     010C                     	;# 
   109     010D                     	;# 
   110     010E                     	;# 
   111     010F                     	;# 
   112     018C                     	;# 
   113     018D                     	;# 
   114     0000                     	;# 
   115     0001                     	;# 
   116     0002                     	;# 
   117     0003                     	;# 
   118     0004                     	;# 
   119     0005                     	;# 
   120     0006                     	;# 
   121     0007                     	;# 
   122     0008                     	;# 
   123     0009                     	;# 
   124     000A                     	;# 
   125     000B                     	;# 
   126     000C                     	;# 
   127     000D                     	;# 
   128     000E                     	;# 
   129     000E                     	;# 
   130     000F                     	;# 
   131     0010                     	;# 
   132     0011                     	;# 
   133     0012                     	;# 
   134     0013                     	;# 
   135     0014                     	;# 
   136     0015                     	;# 
   137     0015                     	;# 
   138     0016                     	;# 
   139     0017                     	;# 
   140     0018                     	;# 
   141     0019                     	;# 
   142     001A                     	;# 
   143     001B                     	;# 
   144     001B                     	;# 
   145     001C                     	;# 
   146     001D                     	;# 
   147     001E                     	;# 
   148     001F                     	;# 
   149     0081                     	;# 
   150     0085                     	;# 
   151     0086                     	;# 
   152     0087                     	;# 
   153     0088                     	;# 
   154     0089                     	;# 
   155     008C                     	;# 
   156     008D                     	;# 
   157     008E                     	;# 
   158     0091                     	;# 
   159     0092                     	;# 
   160     0093                     	;# 
   161     0094                     	;# 
   162     0098                     	;# 
   163     0099                     	;# 
   164     009C                     	;# 
   165     009D                     	;# 
   166     009E                     	;# 
   167     009F                     	;# 
   168     010C                     	;# 
   169     010D                     	;# 
   170     010E                     	;# 
   171     010F                     	;# 
   172     018C                     	;# 
   173     018D                     	;# 
   174     0007                     _PORTC	set	7
   175     0006                     _PORTB	set	6
   176     0087                     _TRISC	set	135
   177     0086                     _TRISB	set	134
   178                           
   179                           	psect	strings
   180     0003                     __pstrings:
   181     0003                     stringtab:
   182     0003                     __stringtab:
   183     0003                     stringcode:	
   184                           ;	String table - string pointers are 1 byte each
   185                           
   186     0003                     stringdir:
   187     0003  3000               	movlw	high stringdir
   188     0004  008A               	movwf	10
   189     0005  0804               	movf	4,w
   190     0006  0A84               	incf	4,f
   191     0007  0782               	addwf	2,f
   192     0008                     __stringbase:
   193     0008  3400               	retlw	0
   194     0009                     __end_of__stringtab:
   195     0009                     STR_1:
   196     0009  3448               	retlw	72	;'H'
   197     000A  3465               	retlw	101	;'e'
   198     000B  346C               	retlw	108	;'l'
   199     000C  346C               	retlw	108	;'l'
   200     000D  346F               	retlw	111	;'o'
   201     000E  3420               	retlw	32	;' '
   202     000F  3457               	retlw	87	;'W'
   203     0010  346F               	retlw	111	;'o'
   204     0011  3472               	retlw	114	;'r'
   205     0012  346C               	retlw	108	;'l'
   206     0013  3464               	retlw	100	;'d'
   207     0014  3400               	retlw	0
   208                           
   209                           	psect	cinit
   210     07FC                     start_initialization:	
   211                           ; #config settings
   212                           
   213     07FC                     __initialization:
   214     07FC                     end_of_initialization:	
   215                           ;End of C runtime variable initialization code
   216                           
   217     07FC                     __end_of__initialization:
   218     07FC  0183               	clrf	3
   219     07FD  120A  118A  2F95   	ljmp	_main	;jump to C main() function
   220                           
   221                           	psect	cstackCOMMON
   222     0070                     __pcstackCOMMON:
   223     0070                     ?_setup:
   224     0070                     ??_setup:	
   225                           ; 1 bytes @ 0x0
   226                           
   227     0070                     ?___init_display:	
   228                           ; 1 bytes @ 0x0
   229                           
   230     0070                     ??___init_display:	
   231                           ; 1 bytes @ 0x0
   232                           
   233     0070                     ?_lcd_write_char:	
   234                           ; 1 bytes @ 0x0
   235                           
   236     0070                     ??_lcd_write_char:	
   237                           ; 1 bytes @ 0x0
   238                           
   239     0070                     ?_lcd_write:	
   240                           ; 1 bytes @ 0x0
   241                           
   242     0070                     ?_home:	
   243                           ; 1 bytes @ 0x0
   244                           
   245     0070                     ??_home:	
   246                           ; 1 bytes @ 0x0
   247                           
   248     0070                     ?_shift_cursor_right:	
   249                           ; 1 bytes @ 0x0
   250                           
   251     0070                     ??_shift_cursor_right:	
   252                           ; 1 bytes @ 0x0
   253                           
   254     0070                     ?_main:	
   255                           ; 1 bytes @ 0x0
   256                           
   257     0070                     ?_strlen:	
   258                           ; 1 bytes @ 0x0
   259                           
   260                           
   261                           ; 2 bytes @ 0x0
   262     0070                     	ds	2
   263     0072                     ??_strlen:
   264     0072                     ?_set_cursor:	
   265                           ; 1 bytes @ 0x2
   266                           
   267     0072                     lcd_write_char@i:	
   268                           ; 1 bytes @ 0x2
   269                           
   270     0072                     set_cursor@horizontal_shift:	
   271                           ; 1 bytes @ 0x2
   272                           
   273                           
   274                           ; 2 bytes @ 0x2
   275     0072                     	ds	1
   276     0073                     strlen@a:
   277                           
   278                           ; 1 bytes @ 0x3
   279     0073                     	ds	1
   280     0074                     ??_set_cursor:
   281     0074                     strlen@s:	
   282                           ; 1 bytes @ 0x4
   283                           
   284                           
   285                           ; 1 bytes @ 0x4
   286     0074                     	ds	1
   287     0075                     ??_lcd_write:
   288     0075                     lcd_write@i:	
   289                           ; 1 bytes @ 0x5
   290                           
   291     0075                     set_cursor@count:	
   292                           ; 2 bytes @ 0x5
   293                           
   294                           
   295                           ; 2 bytes @ 0x5
   296     0075                     	ds	2
   297     0077                     lcd_write@data:
   298                           
   299                           ; 1 bytes @ 0x7
   300     0077                     	ds	1
   301     0078                     ??_main:
   302                           
   303                           	psect	maintext
   304     0795                     __pmaintext:	
   305                           ; 1 bytes @ 0x8
   306 ;;
   307 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   308 ;;
   309 ;; *************** function _main *****************
   310 ;; Defined at:
   311 ;;		line 83 in file "main.c"
   312 ;; Parameters:    Size  Location     Type
   313 ;;		None
   314 ;; Auto vars:     Size  Location     Type
   315 ;;		None
   316 ;; Return value:  Size  Location     Type
   317 ;;                  1    wreg      void 
   318 ;; Registers used:
   319 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   320 ;; Tracked objects:
   321 ;;		On entry : B00/0
   322 ;;		On exit  : 0/0
   323 ;;		Unchanged: 0/0
   324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   325 ;;      Params:         0       0       0       0       0
   326 ;;      Locals:         0       0       0       0       0
   327 ;;      Temps:          0       0       0       0       0
   328 ;;      Totals:         0       0       0       0       0
   329 ;;Total ram usage:        0 bytes
   330 ;; Hardware stack levels required when called: 3
   331 ;; This function calls:
   332 ;;		___init_display
   333 ;;		_lcd_write
   334 ;;		_set_cursor
   335 ;;		_setup
   336 ;; This function is called by:
   337 ;;		Startup code after reset
   338 ;; This function uses a non-reentrant model
   339 ;;
   340                           
   341     0795                     _main:	
   342                           ;psect for function _main
   343                           
   344     0795                     l712:	
   345                           ;incstack = 0
   346                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   347                           
   348                           
   349                           ;main.c: 84:     setup();
   350     0795  120A  118A  2711  120A  118A  	fcall	_setup
   351     079A                     l714:
   352                           
   353                           ;main.c: 85:     __init_display();
   354     079A  120A  118A  272C  120A  118A  	fcall	___init_display
   355     079F                     l716:
   356                           
   357                           ;main.c: 86:     lcd_write("Hello World");
   358     079F  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   359     07A0  120A  118A  27D4  120A  118A  	fcall	_lcd_write
   360     07A5                     l718:
   361                           
   362                           ;main.c: 87:     set_cursor(8);
   363     07A5  3008               	movlw	8
   364     07A6  00F2               	movwf	set_cursor@horizontal_shift
   365     07A7  3000               	movlw	0
   366     07A8  00F3               	movwf	set_cursor@horizontal_shift+1
   367     07A9  120A  118A  27B2  120A  118A  	fcall	_set_cursor
   368     07AE                     l47:	
   369                           ;main.c: 88:     while(1) {
   370                           
   371     07AE                     l48:	
   372                           ;main.c: 89:     }
   373                           
   374     07AE  2FAE               	goto	l47
   375     07AF  120A  118A  2800   	ljmp	start
   376     07B2                     __end_of_main:
   377                           
   378                           	psect	text1
   379     0711                     __ptext1:	
   380 ;; *************** function _setup *****************
   381 ;; Defined at:
   382 ;;		line 20 in file "main.c"
   383 ;; Parameters:    Size  Location     Type
   384 ;;		None
   385 ;; Auto vars:     Size  Location     Type
   386 ;;		None
   387 ;; Return value:  Size  Location     Type
   388 ;;                  1    wreg      void 
   389 ;; Registers used:
   390 ;;		status,2
   391 ;; Tracked objects:
   392 ;;		On entry : 0/0
   393 ;;		On exit  : 0/0
   394 ;;		Unchanged: 0/0
   395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   396 ;;      Params:         0       0       0       0       0
   397 ;;      Locals:         0       0       0       0       0
   398 ;;      Temps:          0       0       0       0       0
   399 ;;      Totals:         0       0       0       0       0
   400 ;;Total ram usage:        0 bytes
   401 ;; Hardware stack levels used: 1
   402 ;; This function calls:
   403 ;;		Nothing
   404 ;; This function is called by:
   405 ;;		_main
   406 ;; This function uses a non-reentrant model
   407 ;;
   408                           
   409     0711                     _setup:	
   410                           ;psect for function _setup
   411                           
   412     0711                     l636:	
   413                           ;incstack = 0
   414                           ; Regs used in _setup: [status,2]
   415                           
   416                           
   417                           ;main.c: 21:     TRISB = 0x00;
   418     0711  1683               	bsf	3,5	;RP0=1, select bank1
   419     0712  1303               	bcf	3,6	;RP1=0, select bank1
   420     0713  0186               	clrf	6	;volatile
   421                           
   422                           ;main.c: 22:     TRISC = 0x00;
   423     0714  0187               	clrf	7	;volatile
   424     0715                     l15:
   425     0715  0008               	return
   426     0716                     __end_of_setup:
   427                           
   428                           	psect	text2
   429     07B2                     __ptext2:	
   430 ;; *************** function _set_cursor *****************
   431 ;; Defined at:
   432 ;;		line 75 in file "main.c"
   433 ;; Parameters:    Size  Location     Type
   434 ;;  horizontal_s    2    2[COMMON] int 
   435 ;; Auto vars:     Size  Location     Type
   436 ;;  count           2    5[COMMON] int 
   437 ;; Return value:  Size  Location     Type
   438 ;;                  1    wreg      void 
   439 ;; Registers used:
   440 ;;		wreg, status,2, status,0, pclath, cstack
   441 ;; Tracked objects:
   442 ;;		On entry : 0/0
   443 ;;		On exit  : 0/0
   444 ;;		Unchanged: 0/0
   445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   446 ;;      Params:         2       0       0       0       0
   447 ;;      Locals:         2       0       0       0       0
   448 ;;      Temps:          1       0       0       0       0
   449 ;;      Totals:         5       0       0       0       0
   450 ;;Total ram usage:        5 bytes
   451 ;; Hardware stack levels used: 1
   452 ;; Hardware stack levels required when called: 1
   453 ;; This function calls:
   454 ;;		_home
   455 ;;		_shift_cursor_right
   456 ;; This function is called by:
   457 ;;		_main
   458 ;; This function uses a non-reentrant model
   459 ;;
   460                           
   461     07B2                     _set_cursor:	
   462                           ;psect for function _set_cursor
   463                           
   464     07B2                     l702:	
   465                           ;incstack = 0
   466                           ; Regs used in _set_cursor: [wreg+status,2+status,0+pclath+cstack]
   467                           
   468                           
   469                           ;main.c: 76:     home();
   470     07B2  120A  118A  2746  120A  118A  	fcall	_home
   471     07B7                     l704:
   472                           
   473                           ;main.c: 77:     int count;;main.c: 78:     for(count=0; count<horizontal_shift; count++
      +                          ) {
   474     07B7  01F5               	clrf	set_cursor@count
   475     07B8  01F6               	clrf	set_cursor@count+1
   476     07B9  2FC5               	goto	l710
   477     07BA                     l706:
   478                           
   479                           ;main.c: 79:         shift_cursor_right();
   480     07BA  120A  118A  2760  120A  118A  	fcall	_shift_cursor_right
   481     07BF                     l708:
   482                           
   483                           ;main.c: 80:     }
   484     07BF  3001               	movlw	1
   485     07C0  07F5               	addwf	set_cursor@count,f
   486     07C1  1803               	skipnc
   487     07C2  0AF6               	incf	set_cursor@count+1,f
   488     07C3  3000               	movlw	0
   489     07C4  07F6               	addwf	set_cursor@count+1,f
   490     07C5                     l710:
   491     07C5  0876               	movf	set_cursor@count+1,w
   492     07C6  3A80               	xorlw	128
   493     07C7  00F4               	movwf	??_set_cursor
   494     07C8  0873               	movf	set_cursor@horizontal_shift+1,w
   495     07C9  3A80               	xorlw	128
   496     07CA  0274               	subwf	??_set_cursor,w
   497     07CB  1D03               	skipz
   498     07CC  2FCF               	goto	u65
   499     07CD  0872               	movf	set_cursor@horizontal_shift,w
   500     07CE  0275               	subwf	set_cursor@count,w
   501     07CF                     u65:
   502     07CF  1C03               	skipc
   503     07D0  2FD2               	goto	u61
   504     07D1  2FD3               	goto	u60
   505     07D2                     u61:
   506     07D2  2FBA               	goto	l706
   507     07D3                     u60:
   508     07D3                     l42:
   509     07D3  0008               	return
   510     07D4                     __end_of_set_cursor:
   511                           
   512                           	psect	text3
   513     0760                     __ptext3:	
   514 ;; *************** function _shift_cursor_right *****************
   515 ;; Defined at:
   516 ;;		line 66 in file "main.c"
   517 ;; Parameters:    Size  Location     Type
   518 ;;		None
   519 ;; Auto vars:     Size  Location     Type
   520 ;;		None
   521 ;; Return value:  Size  Location     Type
   522 ;;                  1    wreg      void 
   523 ;; Registers used:
   524 ;;		wreg, status,2, status,0
   525 ;; Tracked objects:
   526 ;;		On entry : 0/0
   527 ;;		On exit  : 0/0
   528 ;;		Unchanged: 0/0
   529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   530 ;;      Params:         0       0       0       0       0
   531 ;;      Locals:         0       0       0       0       0
   532 ;;      Temps:          2       0       0       0       0
   533 ;;      Totals:         2       0       0       0       0
   534 ;;Total ram usage:        2 bytes
   535 ;; Hardware stack levels used: 1
   536 ;; This function calls:
   537 ;;		Nothing
   538 ;; This function is called by:
   539 ;;		_set_cursor
   540 ;; This function uses a non-reentrant model
   541 ;;
   542                           
   543     0760                     _shift_cursor_right:	
   544                           ;psect for function _shift_cursor_right
   545                           
   546     0760                     l626:	
   547                           ;incstack = 0
   548                           ; Regs used in _shift_cursor_right: [wreg+status,2+status,0]
   549                           
   550                           
   551                           ;main.c: 67:     PORTB &= ~(1 << 6);
   552     0760  30BF               	movlw	191
   553     0761  00F0               	movwf	??_shift_cursor_right
   554     0762  0870               	movf	??_shift_cursor_right,w
   555     0763  1283               	bcf	3,5	;RP0=0, select bank0
   556     0764  1303               	bcf	3,6	;RP1=0, select bank0
   557     0765  0586               	andwf	6,f	;volatile
   558     0766                     l628:
   559                           
   560                           ;main.c: 68:     PORTC = 0b00010100;
   561     0766  3014               	movlw	20
   562     0767  0087               	movwf	7	;volatile
   563     0768                     l630:
   564                           
   565                           ;main.c: 69:     PORTB |= (1 << 7);
   566     0768  1786               	bsf	6,7	;volatile
   567     0769                     l632:
   568                           
   569                           ;main.c: 70:     _delay((unsigned long)((1)*(16000000/4000.0)));
   570     0769  3006               	movlw	6
   571     076A  00F1               	movwf	??_shift_cursor_right+1
   572     076B  3030               	movlw	48
   573     076C  00F0               	movwf	??_shift_cursor_right
   574     076D                     u77:
   575     076D  0BF0               	decfsz	??_shift_cursor_right,f
   576     076E  2F6D               	goto	u77
   577     076F  0BF1               	decfsz	??_shift_cursor_right+1,f
   578     0770  2F6D               	goto	u77
   579     0771  0000               	nop
   580                           
   581                           ;main.c: 71:     PORTB &= ~(1 << 7);
   582     0772  307F               	movlw	127
   583     0773  00F0               	movwf	??_shift_cursor_right
   584     0774  0870               	movf	??_shift_cursor_right,w
   585     0775  1283               	bcf	3,5	;RP0=0, select bank0
   586     0776  1303               	bcf	3,6	;RP1=0, select bank0
   587     0777  0586               	andwf	6,f	;volatile
   588     0778                     l634:
   589                           
   590                           ;main.c: 72:     PORTB |= (1 << 6);
   591     0778  1706               	bsf	6,6	;volatile
   592     0779                     l36:
   593     0779  0008               	return
   594     077A                     __end_of_shift_cursor_right:
   595                           
   596                           	psect	text4
   597     0746                     __ptext4:	
   598 ;; *************** function _home *****************
   599 ;; Defined at:
   600 ;;		line 57 in file "main.c"
   601 ;; Parameters:    Size  Location     Type
   602 ;;		None
   603 ;; Auto vars:     Size  Location     Type
   604 ;;		None
   605 ;; Return value:  Size  Location     Type
   606 ;;                  1    wreg      void 
   607 ;; Registers used:
   608 ;;		wreg, status,2, status,0
   609 ;; Tracked objects:
   610 ;;		On entry : 0/0
   611 ;;		On exit  : 0/0
   612 ;;		Unchanged: 0/0
   613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   614 ;;      Params:         0       0       0       0       0
   615 ;;      Locals:         0       0       0       0       0
   616 ;;      Temps:          2       0       0       0       0
   617 ;;      Totals:         2       0       0       0       0
   618 ;;Total ram usage:        2 bytes
   619 ;; Hardware stack levels used: 1
   620 ;; This function calls:
   621 ;;		Nothing
   622 ;; This function is called by:
   623 ;;		_set_cursor
   624 ;; This function uses a non-reentrant model
   625 ;;
   626                           
   627     0746                     _home:	
   628                           ;psect for function _home
   629                           
   630     0746                     l616:	
   631                           ;incstack = 0
   632                           ; Regs used in _home: [wreg+status,2+status,0]
   633                           
   634                           
   635                           ;main.c: 58:     PORTB &= ~(1 << 6);
   636     0746  30BF               	movlw	191
   637     0747  00F0               	movwf	??_home
   638     0748  0870               	movf	??_home,w
   639     0749  1283               	bcf	3,5	;RP0=0, select bank0
   640     074A  1303               	bcf	3,6	;RP1=0, select bank0
   641     074B  0586               	andwf	6,f	;volatile
   642     074C                     l618:
   643                           
   644                           ;main.c: 59:     PORTC = 0b00000010;
   645     074C  3002               	movlw	2
   646     074D  0087               	movwf	7	;volatile
   647     074E                     l620:
   648                           
   649                           ;main.c: 60:     PORTB |= (1 << 7);
   650     074E  1786               	bsf	6,7	;volatile
   651     074F                     l622:
   652                           
   653                           ;main.c: 61:     _delay((unsigned long)((1)*(16000000/4000.0)));
   654     074F  3006               	movlw	6
   655     0750  00F1               	movwf	??_home+1
   656     0751  3030               	movlw	48
   657     0752  00F0               	movwf	??_home
   658     0753                     u87:
   659     0753  0BF0               	decfsz	??_home,f
   660     0754  2F53               	goto	u87
   661     0755  0BF1               	decfsz	??_home+1,f
   662     0756  2F53               	goto	u87
   663     0757  0000               	nop
   664                           
   665                           ;main.c: 62:     PORTB &= ~(1 << 7);
   666     0758  307F               	movlw	127
   667     0759  00F0               	movwf	??_home
   668     075A  0870               	movf	??_home,w
   669     075B  1283               	bcf	3,5	;RP0=0, select bank0
   670     075C  1303               	bcf	3,6	;RP1=0, select bank0
   671     075D  0586               	andwf	6,f	;volatile
   672     075E                     l624:
   673                           
   674                           ;main.c: 63:     PORTB |= (1 << 6);
   675     075E  1706               	bsf	6,6	;volatile
   676     075F                     l33:
   677     075F  0008               	return
   678     0760                     __end_of_home:
   679                           
   680                           	psect	text5
   681     07D4                     __ptext5:	
   682 ;; *************** function _lcd_write *****************
   683 ;; Defined at:
   684 ;;		line 50 in file "main.c"
   685 ;; Parameters:    Size  Location     Type
   686 ;;  data            1    wreg     PTR unsigned char 
   687 ;;		 -> STR_1(12), 
   688 ;; Auto vars:     Size  Location     Type
   689 ;;  data            1    7[COMMON] PTR unsigned char 
   690 ;;		 -> STR_1(12), 
   691 ;;  i               2    5[COMMON] int 
   692 ;; Return value:  Size  Location     Type
   693 ;;                  1    wreg      void 
   694 ;; Registers used:
   695 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   696 ;; Tracked objects:
   697 ;;		On entry : 0/0
   698 ;;		On exit  : 0/0
   699 ;;		Unchanged: 0/0
   700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   701 ;;      Params:         0       0       0       0       0
   702 ;;      Locals:         3       0       0       0       0
   703 ;;      Temps:          0       0       0       0       0
   704 ;;      Totals:         3       0       0       0       0
   705 ;;Total ram usage:        3 bytes
   706 ;; Hardware stack levels used: 1
   707 ;; Hardware stack levels required when called: 2
   708 ;; This function calls:
   709 ;;		_lcd_write_char
   710 ;;		_strlen
   711 ;; This function is called by:
   712 ;;		_main
   713 ;; This function uses a non-reentrant model
   714 ;;
   715                           
   716     07D4                     _lcd_write:	
   717                           ;psect for function _lcd_write
   718                           
   719                           
   720                           ;incstack = 0
   721                           ; Regs used in _lcd_write: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   722                           ;lcd_write@data stored from wreg
   723     07D4  00F7               	movwf	lcd_write@data
   724     07D5                     l694:
   725                           
   726                           ;main.c: 51:     int i;;main.c: 52:     for(i=0; i<(strlen(data)); i++) {
   727     07D5  01F5               	clrf	lcd_write@i
   728     07D6  01F6               	clrf	lcd_write@i+1
   729     07D7  2FEB               	goto	l700
   730     07D8                     l696:
   731                           
   732                           ;main.c: 53:         lcd_write_char(data[i]);
   733     07D8  0875               	movf	lcd_write@i,w
   734     07D9  0777               	addwf	lcd_write@data,w
   735     07DA  0084               	movwf	4
   736     07DB  120A  118A  2003  120A  118A  	fcall	stringdir
   737     07E0  120A  118A  2716  120A  118A  	fcall	_lcd_write_char
   738     07E5                     l698:
   739                           
   740                           ;main.c: 54:     }
   741     07E5  3001               	movlw	1
   742     07E6  07F5               	addwf	lcd_write@i,f
   743     07E7  1803               	skipnc
   744     07E8  0AF6               	incf	lcd_write@i+1,f
   745     07E9  3000               	movlw	0
   746     07EA  07F6               	addwf	lcd_write@i+1,f
   747     07EB                     l700:
   748     07EB  0877               	movf	lcd_write@data,w
   749     07EC  120A  118A  277A  120A  118A  	fcall	_strlen
   750     07F1  0871               	movf	?_strlen+1,w
   751     07F2  0276               	subwf	lcd_write@i+1,w
   752     07F3  1D03               	skipz
   753     07F4  2FF7               	goto	u55
   754     07F5  0870               	movf	?_strlen,w
   755     07F6  0275               	subwf	lcd_write@i,w
   756     07F7                     u55:
   757     07F7  1C03               	skipc
   758     07F8  2FFA               	goto	u51
   759     07F9  2FFB               	goto	u50
   760     07FA                     u51:
   761     07FA  2FD8               	goto	l696
   762     07FB                     u50:
   763     07FB                     l30:
   764     07FB  0008               	return
   765     07FC                     __end_of_lcd_write:
   766                           
   767                           	psect	text6
   768     077A                     __ptext6:	
   769 ;; *************** function _strlen *****************
   770 ;; Defined at:
   771 ;;		line 5 in file "/opt/microchip/xc8/v2.45/pic/sources/c99/common/strlen.c"
   772 ;; Parameters:    Size  Location     Type
   773 ;;  s               1    wreg     PTR const unsigned char 
   774 ;;		 -> STR_1(12), 
   775 ;; Auto vars:     Size  Location     Type
   776 ;;  s               1    4[COMMON] PTR const unsigned char 
   777 ;;		 -> STR_1(12), 
   778 ;;  a               1    3[COMMON] PTR const unsigned char 
   779 ;;		 -> STR_1(12), 
   780 ;; Return value:  Size  Location     Type
   781 ;;                  2    0[COMMON] unsigned int 
   782 ;; Registers used:
   783 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   784 ;; Tracked objects:
   785 ;;		On entry : 0/0
   786 ;;		On exit  : 0/0
   787 ;;		Unchanged: 0/0
   788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   789 ;;      Params:         2       0       0       0       0
   790 ;;      Locals:         2       0       0       0       0
   791 ;;      Temps:          1       0       0       0       0
   792 ;;      Totals:         5       0       0       0       0
   793 ;;Total ram usage:        5 bytes
   794 ;; Hardware stack levels used: 2
   795 ;; This function calls:
   796 ;;		Nothing
   797 ;; This function is called by:
   798 ;;		_lcd_write
   799 ;; This function uses a non-reentrant model
   800 ;;
   801                           
   802     077A                     _strlen:	
   803                           ;psect for function _strlen
   804                           
   805                           
   806                           ;incstack = 0
   807                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0+pclath]
   808                           ;strlen@s stored from wreg
   809     077A  00F4               	movwf	strlen@s
   810     077B                     l684:
   811     077B  0874               	movf	strlen@s,w
   812     077C  00F3               	movwf	strlen@a
   813     077D  2F82               	goto	l688
   814     077E                     l686:
   815     077E  3001               	movlw	1
   816     077F  00F2               	movwf	??_strlen
   817     0780  0872               	movf	??_strlen,w
   818     0781  07F4               	addwf	strlen@s,f
   819     0782                     l688:
   820     0782  0874               	movf	strlen@s,w
   821     0783  0084               	movwf	4
   822     0784  120A  118A  2003  120A  118A  	fcall	stringdir
   823     0789  3A00               	xorlw	0
   824     078A  1D03               	skipz
   825     078B  2F8D               	goto	u41
   826     078C  2F8E               	goto	u40
   827     078D                     u41:
   828     078D  2F7E               	goto	l686
   829     078E                     u40:
   830     078E                     l690:
   831     078E  0873               	movf	strlen@a,w
   832     078F  0274               	subwf	strlen@s,w
   833     0790  00F0               	movwf	?_strlen
   834     0791  01F1               	clrf	?_strlen+1
   835     0792  1BF0               	btfsc	?_strlen,7
   836     0793  03F1               	decf	?_strlen+1,f
   837     0794                     l598:
   838     0794  0008               	return
   839     0795                     __end_of_strlen:
   840                           
   841                           	psect	text7
   842     0716                     __ptext7:	
   843 ;; *************** function _lcd_write_char *****************
   844 ;; Defined at:
   845 ;;		line 43 in file "main.c"
   846 ;; Parameters:    Size  Location     Type
   847 ;;  i               1    wreg     unsigned char 
   848 ;; Auto vars:     Size  Location     Type
   849 ;;  i               1    2[COMMON] unsigned char 
   850 ;; Return value:  Size  Location     Type
   851 ;;                  1    wreg      void 
   852 ;; Registers used:
   853 ;;		wreg, status,2, status,0
   854 ;; Tracked objects:
   855 ;;		On entry : 0/0
   856 ;;		On exit  : 0/0
   857 ;;		Unchanged: 0/0
   858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   859 ;;      Params:         0       0       0       0       0
   860 ;;      Locals:         1       0       0       0       0
   861 ;;      Temps:          2       0       0       0       0
   862 ;;      Totals:         3       0       0       0       0
   863 ;;Total ram usage:        3 bytes
   864 ;; Hardware stack levels used: 1
   865 ;; This function calls:
   866 ;;		Nothing
   867 ;; This function is called by:
   868 ;;		_lcd_write
   869 ;; This function uses a non-reentrant model
   870 ;;
   871                           
   872     0716                     _lcd_write_char:	
   873                           ;psect for function _lcd_write_char
   874                           
   875                           
   876                           ;incstack = 0
   877                           ; Regs used in _lcd_write_char: [wreg+status,2+status,0]
   878                           ;lcd_write_char@i stored from wreg
   879     0716  00F2               	movwf	lcd_write_char@i
   880     0717                     l600:
   881                           
   882                           ;main.c: 44:     PORTC = i;
   883     0717  0872               	movf	lcd_write_char@i,w
   884     0718  1283               	bcf	3,5	;RP0=0, select bank0
   885     0719  1303               	bcf	3,6	;RP1=0, select bank0
   886     071A  0087               	movwf	7	;volatile
   887     071B                     l602:
   888                           
   889                           ;main.c: 45:     PORTB |= (1 << 7);
   890     071B  1786               	bsf	6,7	;volatile
   891                           
   892                           ;main.c: 46:     _delay((unsigned long)((1)*(16000000/4000.0)));
   893     071C  3006               	movlw	6
   894     071D  00F1               	movwf	??_lcd_write_char+1
   895     071E  3030               	movlw	48
   896     071F  00F0               	movwf	??_lcd_write_char
   897     0720                     u97:
   898     0720  0BF0               	decfsz	??_lcd_write_char,f
   899     0721  2F20               	goto	u97
   900     0722  0BF1               	decfsz	??_lcd_write_char+1,f
   901     0723  2F20               	goto	u97
   902     0724  0000               	nop
   903     0725                     l604:
   904                           
   905                           ;main.c: 47:     PORTB &= ~(1 << 7);
   906     0725  307F               	movlw	127
   907     0726  00F0               	movwf	??_lcd_write_char
   908     0727  0870               	movf	??_lcd_write_char,w
   909     0728  1283               	bcf	3,5	;RP0=0, select bank0
   910     0729  1303               	bcf	3,6	;RP1=0, select bank0
   911     072A  0586               	andwf	6,f	;volatile
   912     072B                     l24:
   913     072B  0008               	return
   914     072C                     __end_of_lcd_write_char:
   915                           
   916                           	psect	text8
   917     072C                     __ptext8:	
   918 ;; *************** function ___init_display *****************
   919 ;; Defined at:
   920 ;;		line 25 in file "main.c"
   921 ;; Parameters:    Size  Location     Type
   922 ;;		None
   923 ;; Auto vars:     Size  Location     Type
   924 ;;		None
   925 ;; Return value:  Size  Location     Type
   926 ;;                  1    wreg      void 
   927 ;; Registers used:
   928 ;;		wreg, status,2, status,0
   929 ;; Tracked objects:
   930 ;;		On entry : 0/0
   931 ;;		On exit  : 0/0
   932 ;;		Unchanged: 0/0
   933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   934 ;;      Params:         0       0       0       0       0
   935 ;;      Locals:         0       0       0       0       0
   936 ;;      Temps:          2       0       0       0       0
   937 ;;      Totals:         2       0       0       0       0
   938 ;;Total ram usage:        2 bytes
   939 ;; Hardware stack levels used: 1
   940 ;; This function calls:
   941 ;;		Nothing
   942 ;; This function is called by:
   943 ;;		_main
   944 ;; This function uses a non-reentrant model
   945 ;;
   946                           
   947     072C                     ___init_display:	
   948                           ;psect for function ___init_display
   949                           
   950     072C                     l638:	
   951                           ;incstack = 0
   952                           ; Regs used in ___init_display: [wreg+status,2+status,0]
   953                           
   954                           
   955                           ;main.c: 26:     PORTB &= ~(1 << 6);
   956     072C  30BF               	movlw	191
   957     072D  00F0               	movwf	??___init_display
   958     072E  0870               	movf	??___init_display,w
   959     072F  1283               	bcf	3,5	;RP0=0, select bank0
   960     0730  1303               	bcf	3,6	;RP1=0, select bank0
   961     0731  0586               	andwf	6,f	;volatile
   962     0732                     l640:
   963                           
   964                           ;main.c: 27:     PORTC = 0b00001111;
   965     0732  300F               	movlw	15
   966     0733  0087               	movwf	7	;volatile
   967     0734                     l642:
   968                           
   969                           ;main.c: 28:     PORTB |= (1 << 7);
   970     0734  1786               	bsf	6,7	;volatile
   971     0735                     l644:
   972                           
   973                           ;main.c: 29:     _delay((unsigned long)((1)*(16000000/4000.0)));
   974     0735  3006               	movlw	6
   975     0736  00F1               	movwf	??___init_display+1
   976     0737  3030               	movlw	48
   977     0738  00F0               	movwf	??___init_display
   978     0739                     u107:
   979     0739  0BF0               	decfsz	??___init_display,f
   980     073A  2F39               	goto	u107
   981     073B  0BF1               	decfsz	??___init_display+1,f
   982     073C  2F39               	goto	u107
   983     073D  0000               	nop
   984                           
   985                           ;main.c: 30:     PORTB &= ~(1 << 7);
   986     073E  307F               	movlw	127
   987     073F  00F0               	movwf	??___init_display
   988     0740  0870               	movf	??___init_display,w
   989     0741  1283               	bcf	3,5	;RP0=0, select bank0
   990     0742  1303               	bcf	3,6	;RP1=0, select bank0
   991     0743  0586               	andwf	6,f	;volatile
   992     0744                     l646:
   993                           
   994                           ;main.c: 31:     PORTB |= (1 << 6);
   995     0744  1706               	bsf	6,6	;volatile
   996     0745                     l18:
   997     0745  0008               	return
   998     0746                     __end_of___init_display:
   999     007E                     btemp	set	126	;btemp
  1000     007E                     wtemp0	set	126
  1001                           
  1002                           	psect	idloc
  1003                           
  1004                           ;Config register IDLOC0 @ 0x2000
  1005                           ;	unspecified, using default values
  1006     2000                     	org	8192
  1007     2000  3FFF               	dw	16383
  1008                           
  1009                           ;Config register IDLOC1 @ 0x2001
  1010                           ;	unspecified, using default values
  1011     2001                     	org	8193
  1012     2001  3FFF               	dw	16383
  1013                           
  1014                           ;Config register IDLOC2 @ 0x2002
  1015                           ;	unspecified, using default values
  1016     2002                     	org	8194
  1017     2002  3FFF               	dw	16383
  1018                           
  1019                           ;Config register IDLOC3 @ 0x2003
  1020                           ;	unspecified, using default values
  1021     2003                     	org	8195
  1022     2003  3FFF               	dw	16383
  1023                           
  1024                           	psect	config
  1025                           
  1026                           ;Config register CONFIG @ 0x2007
  1027                           ;	Oscillator Selection bits
  1028                           ;	FOSC = HS, HS oscillator
  1029                           ;	Watchdog Timer Enable bit
  1030                           ;	WDTE = OFF, WDT disabled
  1031                           ;	Power-up Timer Enable bit
  1032                           ;	PWRTE = OFF, PWRT disabled
  1033                           ;	Brown-out Reset Enable bit
  1034                           ;	BOREN = ON, BOR enabled
  1035                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1036                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1037                           ;	Data EEPROM Memory Code Protection bit
  1038                           ;	CPD = OFF, Data EEPROM code protection off
  1039                           ;	Flash Program Memory Write Enable bits
  1040                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1041                           ;	In-Circuit Debugger Mode bit
  1042                           ;	DEBUG = 0x1, unprogrammed default
  1043                           ;	Flash Program Memory Code Protection bit
  1044                           ;	CP = OFF, Code protection off
  1045     2007                     	org	8199
  1046     2007  3F7A               	dw	16250

Data Sizes:
    Strings     12
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       8
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    lcd_write@data	PTR unsigned char  size(1) Largest target is 12
		 -> STR_1(CODE[12]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 12
		 -> STR_1(CODE[12]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 12
		 -> STR_1(CODE[12]), 


Critical Paths under _main in COMMON

    _main->_lcd_write
    _set_cursor->_home
    _set_cursor->_shift_cursor_right
    _lcd_write->_strlen

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     383
                     ___init_display
                          _lcd_write
                         _set_cursor
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _set_cursor                                           5     3      2     122
                                              2 COMMON     5     3      2
                               _home
                 _shift_cursor_right
 ---------------------------------------------------------------------------------
 (2) _shift_cursor_right                                   2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _home                                                 2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _lcd_write                                            3     3      0     261
                                              5 COMMON     3     3      0
                     _lcd_write_char
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               5     3      2     123
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (2) _lcd_write_char                                       3     3      0      15
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) ___init_display                                       2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___init_display
   _lcd_write
     _lcd_write_char
     _strlen
   _set_cursor
     _home
     _shift_cursor_right
   _setup

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       8       1       57.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Oct 18 22:05:05 2023

                         pc 0002                          l30 07FB                          l15 0715  
                        l24 072B                          l33 075F                          l18 0745  
                        l42 07D3                          l36 0779                          l47 07AE  
                        l48 07AE                          u40 078E                          u41 078D  
                        u50 07FB                          u51 07FA                          u60 07D3  
                        u61 07D2                          u55 07F7                          u65 07CF  
                        u77 076D                          u87 0753                          u97 0720  
                        fsr 0004             set_cursor@count 0075                         l600 0717  
                       l602 071B                         l604 0725                         l700 07EB  
                       l620 074E                         l622 074F                         l630 0768  
                       l710 07C5                         l702 07B2                         l640 0732  
                       l624 075E                         l616 0746                         l632 0769  
                       l704 07B7                         l712 0795                         l642 0734  
                       l618 074C                         l634 0778                         l626 0760  
                       l706 07BA                         l714 079A                         l644 0735  
                       l628 0766                         l708 07BF                         l636 0711  
                       l716 079F                         l646 0744                         l638 072C  
                       l718 07A5                         l690 078E                         l684 077B  
                       l598 0794                         l686 077E                         l694 07D5  
                       l688 0782                         l696 07D8                         l698 07E5  
                       u107 0739                         fsr0 0004                        STR_1 0009  
           lcd_write_char@i 0072      __end_of_lcd_write_char 072C                        _main 0795  
                      _home 0746                        btemp 007E                        start 0000  
                     ?_main 0070                       ?_home 0070                       _PORTB 0006  
                     _PORTC 0007                       _TRISB 0086                       _TRISC 0087  
                     _setup 0711                       pclath 000A             ?_lcd_write_char 0070  
                     status 0003                       wtemp0 007E  __end_of_shift_cursor_right 077A  
           __initialization 07FC                __end_of_main 07B2                __end_of_home 0760  
                    ??_main 0078                      ??_home 0070                      ?_setup 0070  
                    _strlen 077A              ___init_display 072C     __end_of__initialization 07FC  
             lcd_write@data 0077              __pcstackCOMMON 0070               __end_of_setup 0716  
    __end_of___init_display 0746                     ??_setup 0070                  __pmaintext 0795  
                   ?_strlen 0070  set_cursor@horizontal_shift 0072            ??_lcd_write_char 0070  
           ?___init_display 0070                  __stringtab 0003           __end_of_lcd_write 07FC  
        _shift_cursor_right 0760                     __ptext1 0711                     __ptext2 07B2  
                   __ptext3 0760                     __ptext4 0746                     __ptext5 07D4  
                   __ptext6 077A                     __ptext7 0716                     __ptext8 072C  
       ?_shift_cursor_right 0070        end_of_initialization 07FC        ??_shift_cursor_right 0070  
                _set_cursor 07B2                     strlen@a 0073                     strlen@s 0074  
                lcd_write@i 0075              __end_of_strlen 0795         start_initialization 07FC  
               ?_set_cursor 0072                    ??_strlen 0072            ??___init_display 0070  
                 ___latbits 0002                   __pstrings 0003                   _lcd_write 07D4  
               __stringbase 0008                  ?_lcd_write 0070          __end_of__stringtab 0009  
              ??_set_cursor 0074                 ??_lcd_write 0075          __end_of_set_cursor 07D4  
                 stringcode 0003                    stringdir 0003                    stringtab 0003  
            _lcd_write_char 0716  
