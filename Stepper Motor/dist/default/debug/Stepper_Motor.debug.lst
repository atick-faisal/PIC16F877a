

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Oct 18 22:06:21 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	maintext,global,class=CODE,split=1,delta=2
     7                           	psect	text1,local,class=CODE,merge=1,delta=2
     8                           	psect	text2,local,class=CODE,merge=1,delta=2
     9                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    10                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    11                           	dabs	1,0x7E,2
    12     0000                     
    13                           ; Generated 22/03/2023 GMT
    14                           ; 
    15                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    16                           ; All rights reserved.
    17                           ; 
    18                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    19                           ; 
    20                           ; Redistribution and use in source and binary forms, with or without modification, are
    21                           ; permitted provided that the following conditions are met:
    22                           ; 
    23                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    24                           ;        conditions and the following disclaimer.
    25                           ; 
    26                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    27                           ;        of conditions and the following disclaimer in the documentation and/or other
    28                           ;        materials provided with the distribution. Publication is not required when
    29                           ;        this file is used in an embedded application.
    30                           ; 
    31                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    32                           ;        software without specific prior written permission.
    33                           ; 
    34                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    35                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    36                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    37                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    38                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    39                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    40                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    41                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    42                           ; 
    43                           ; 
    44                           ; Code-generator required, PIC16F877A Definitions
    45                           ; 
    46                           ; SFR Addresses
    47     0000                     	;# 
    48     0001                     	;# 
    49     0002                     	;# 
    50     0003                     	;# 
    51     0004                     	;# 
    52     0005                     	;# 
    53     0006                     	;# 
    54     0007                     	;# 
    55     0008                     	;# 
    56     0009                     	;# 
    57     000A                     	;# 
    58     000B                     	;# 
    59     000C                     	;# 
    60     000D                     	;# 
    61     000E                     	;# 
    62     000E                     	;# 
    63     000F                     	;# 
    64     0010                     	;# 
    65     0011                     	;# 
    66     0012                     	;# 
    67     0013                     	;# 
    68     0014                     	;# 
    69     0015                     	;# 
    70     0015                     	;# 
    71     0016                     	;# 
    72     0017                     	;# 
    73     0018                     	;# 
    74     0019                     	;# 
    75     001A                     	;# 
    76     001B                     	;# 
    77     001B                     	;# 
    78     001C                     	;# 
    79     001D                     	;# 
    80     001E                     	;# 
    81     001F                     	;# 
    82     0081                     	;# 
    83     0085                     	;# 
    84     0086                     	;# 
    85     0087                     	;# 
    86     0088                     	;# 
    87     0089                     	;# 
    88     008C                     	;# 
    89     008D                     	;# 
    90     008E                     	;# 
    91     0091                     	;# 
    92     0092                     	;# 
    93     0093                     	;# 
    94     0094                     	;# 
    95     0098                     	;# 
    96     0099                     	;# 
    97     009C                     	;# 
    98     009D                     	;# 
    99     009E                     	;# 
   100     009F                     	;# 
   101     010C                     	;# 
   102     010D                     	;# 
   103     010E                     	;# 
   104     010F                     	;# 
   105     018C                     	;# 
   106     018D                     	;# 
   107     0000                     	;# 
   108     0001                     	;# 
   109     0002                     	;# 
   110     0003                     	;# 
   111     0004                     	;# 
   112     0005                     	;# 
   113     0006                     	;# 
   114     0007                     	;# 
   115     0008                     	;# 
   116     0009                     	;# 
   117     000A                     	;# 
   118     000B                     	;# 
   119     000C                     	;# 
   120     000D                     	;# 
   121     000E                     	;# 
   122     000E                     	;# 
   123     000F                     	;# 
   124     0010                     	;# 
   125     0011                     	;# 
   126     0012                     	;# 
   127     0013                     	;# 
   128     0014                     	;# 
   129     0015                     	;# 
   130     0015                     	;# 
   131     0016                     	;# 
   132     0017                     	;# 
   133     0018                     	;# 
   134     0019                     	;# 
   135     001A                     	;# 
   136     001B                     	;# 
   137     001B                     	;# 
   138     001C                     	;# 
   139     001D                     	;# 
   140     001E                     	;# 
   141     001F                     	;# 
   142     0081                     	;# 
   143     0085                     	;# 
   144     0086                     	;# 
   145     0087                     	;# 
   146     0088                     	;# 
   147     0089                     	;# 
   148     008C                     	;# 
   149     008D                     	;# 
   150     008E                     	;# 
   151     0091                     	;# 
   152     0092                     	;# 
   153     0093                     	;# 
   154     0094                     	;# 
   155     0098                     	;# 
   156     0099                     	;# 
   157     009C                     	;# 
   158     009D                     	;# 
   159     009E                     	;# 
   160     009F                     	;# 
   161     010C                     	;# 
   162     010D                     	;# 
   163     010E                     	;# 
   164     010F                     	;# 
   165     018C                     	;# 
   166     018D                     	;# 
   167     0007                     _PORTC	set	7
   168     0087                     _TRISC	set	135
   169                           
   170                           	psect	cinit
   171     07FC                     start_initialization:	
   172                           ; #config settings
   173                           
   174     07FC                     __initialization:
   175     07FC                     end_of_initialization:	
   176                           ;End of C runtime variable initialization code
   177                           
   178     07FC                     __end_of__initialization:
   179     07FC  0183               	clrf	3
   180     07FD  120A  118A  2F92   	ljmp	_main	;jump to C main() function
   181                           
   182                           	psect	cstackCOMMON
   183     0070                     __pcstackCOMMON:
   184     0070                     ?__init:
   185     0070                     ??__init:	
   186                           ; 1 bytes @ 0x0
   187                           
   188     0070                     ?_rotate_motor:	
   189                           ; 1 bytes @ 0x0
   190                           
   191     0070                     ??_rotate_motor:	
   192                           ; 1 bytes @ 0x0
   193                           
   194     0070                     ?_main:	
   195                           ; 1 bytes @ 0x0
   196                           
   197                           
   198                           ; 1 bytes @ 0x0
   199     0070                     	ds	2
   200     0072                     ??_main:
   201                           
   202                           	psect	maintext
   203     0792                     __pmaintext:	
   204                           ; 1 bytes @ 0x2
   205 ;;
   206 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   207 ;;
   208 ;; *************** function _main *****************
   209 ;; Defined at:
   210 ;;		line 35 in file "main.c"
   211 ;; Parameters:    Size  Location     Type
   212 ;;		None
   213 ;; Auto vars:     Size  Location     Type
   214 ;;		None
   215 ;; Return value:  Size  Location     Type
   216 ;;                  1    wreg      void 
   217 ;; Registers used:
   218 ;;		wreg, status,2, status,0, pclath, cstack
   219 ;; Tracked objects:
   220 ;;		On entry : B00/0
   221 ;;		On exit  : 0/0
   222 ;;		Unchanged: 0/0
   223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   224 ;;      Params:         0       0       0       0       0
   225 ;;      Locals:         0       0       0       0       0
   226 ;;      Temps:          0       0       0       0       0
   227 ;;      Totals:         0       0       0       0       0
   228 ;;Total ram usage:        0 bytes
   229 ;; Hardware stack levels required when called: 1
   230 ;; This function calls:
   231 ;;		__init
   232 ;;		_rotate_motor
   233 ;; This function is called by:
   234 ;;		Startup code after reset
   235 ;; This function uses a non-reentrant model
   236 ;;
   237                           
   238     0792                     _main:	
   239                           ;psect for function _main
   240                           
   241     0792                     l568:	
   242                           ;incstack = 0
   243                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   244                           
   245                           
   246                           ;main.c: 36:     _init();
   247     0792  120A  118A  278B  120A  118A  	fcall	__init
   248     0797                     l570:
   249                           
   250                           ;main.c: 38:         rotate_motor();
   251     0797  120A  118A  27A0  120A  118A  	fcall	_rotate_motor
   252     079C  2F97               	goto	l570
   253     079D  120A  118A  2800   	ljmp	start
   254     07A0                     __end_of_main:
   255                           
   256                           	psect	text1
   257     07A0                     __ptext1:	
   258 ;; *************** function _rotate_motor *****************
   259 ;; Defined at:
   260 ;;		line 18 in file "main.c"
   261 ;; Parameters:    Size  Location     Type
   262 ;;		None
   263 ;; Auto vars:     Size  Location     Type
   264 ;;		None
   265 ;; Return value:  Size  Location     Type
   266 ;;                  1    wreg      void 
   267 ;; Registers used:
   268 ;;		wreg
   269 ;; Tracked objects:
   270 ;;		On entry : 0/0
   271 ;;		On exit  : 0/0
   272 ;;		Unchanged: 0/0
   273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   274 ;;      Params:         0       0       0       0       0
   275 ;;      Locals:         0       0       0       0       0
   276 ;;      Temps:          2       0       0       0       0
   277 ;;      Totals:         2       0       0       0       0
   278 ;;Total ram usage:        2 bytes
   279 ;; Hardware stack levels used: 1
   280 ;; This function calls:
   281 ;;		Nothing
   282 ;; This function is called by:
   283 ;;		_main
   284 ;; This function uses a non-reentrant model
   285 ;;
   286                           
   287     07A0                     _rotate_motor:	
   288                           ;psect for function _rotate_motor
   289                           
   290     07A0                     l566:	
   291                           ;incstack = 0
   292                           ; Regs used in _rotate_motor: [wreg]
   293                           
   294                           
   295                           ;main.c: 19:     PORTC = 0b00000001;
   296     07A0  3001               	movlw	1
   297     07A1  1283               	bcf	3,5	;RP0=0, select bank0
   298     07A2  1303               	bcf	3,6	;RP1=0, select bank0
   299     07A3  0087               	movwf	7	;volatile
   300                           
   301                           ;main.c: 20:     _delay((unsigned long)((40)*(16000000/4000.0)));
   302     07A4  30D0               	movlw	208
   303     07A5  00F1               	movwf	??_rotate_motor+1
   304     07A6  30C9               	movlw	201
   305     07A7  00F0               	movwf	??_rotate_motor
   306     07A8                     u17:
   307     07A8  0BF0               	decfsz	??_rotate_motor,f
   308     07A9  2FA8               	goto	u17
   309     07AA  0BF1               	decfsz	??_rotate_motor+1,f
   310     07AB  2FA8               	goto	u17
   311     07AC  2FAD               	nop2
   312                           
   313                           ;main.c: 21:     PORTC = 0b00000011;
   314     07AD  3003               	movlw	3
   315     07AE  1283               	bcf	3,5	;RP0=0, select bank0
   316     07AF  1303               	bcf	3,6	;RP1=0, select bank0
   317     07B0  0087               	movwf	7	;volatile
   318                           
   319                           ;main.c: 22:     _delay((unsigned long)((40)*(16000000/4000.0)));
   320     07B1  30D0               	movlw	208
   321     07B2  00F1               	movwf	??_rotate_motor+1
   322     07B3  30C9               	movlw	201
   323     07B4  00F0               	movwf	??_rotate_motor
   324     07B5                     u27:
   325     07B5  0BF0               	decfsz	??_rotate_motor,f
   326     07B6  2FB5               	goto	u27
   327     07B7  0BF1               	decfsz	??_rotate_motor+1,f
   328     07B8  2FB5               	goto	u27
   329     07B9  2FBA               	nop2
   330                           
   331                           ;main.c: 23:     PORTC = 0b00000010;
   332     07BA  3002               	movlw	2
   333     07BB  1283               	bcf	3,5	;RP0=0, select bank0
   334     07BC  1303               	bcf	3,6	;RP1=0, select bank0
   335     07BD  0087               	movwf	7	;volatile
   336                           
   337                           ;main.c: 24:     _delay((unsigned long)((40)*(16000000/4000.0)));
   338     07BE  30D0               	movlw	208
   339     07BF  00F1               	movwf	??_rotate_motor+1
   340     07C0  30C9               	movlw	201
   341     07C1  00F0               	movwf	??_rotate_motor
   342     07C2                     u37:
   343     07C2  0BF0               	decfsz	??_rotate_motor,f
   344     07C3  2FC2               	goto	u37
   345     07C4  0BF1               	decfsz	??_rotate_motor+1,f
   346     07C5  2FC2               	goto	u37
   347     07C6  2FC7               	nop2
   348                           
   349                           ;main.c: 25:     PORTC = 0b00000110;
   350     07C7  3006               	movlw	6
   351     07C8  1283               	bcf	3,5	;RP0=0, select bank0
   352     07C9  1303               	bcf	3,6	;RP1=0, select bank0
   353     07CA  0087               	movwf	7	;volatile
   354                           
   355                           ;main.c: 26:     _delay((unsigned long)((40)*(16000000/4000.0)));
   356     07CB  30D0               	movlw	208
   357     07CC  00F1               	movwf	??_rotate_motor+1
   358     07CD  30C9               	movlw	201
   359     07CE  00F0               	movwf	??_rotate_motor
   360     07CF                     u47:
   361     07CF  0BF0               	decfsz	??_rotate_motor,f
   362     07D0  2FCF               	goto	u47
   363     07D1  0BF1               	decfsz	??_rotate_motor+1,f
   364     07D2  2FCF               	goto	u47
   365     07D3  2FD4               	nop2
   366                           
   367                           ;main.c: 27:     PORTC = 0b00000100;
   368     07D4  3004               	movlw	4
   369     07D5  1283               	bcf	3,5	;RP0=0, select bank0
   370     07D6  1303               	bcf	3,6	;RP1=0, select bank0
   371     07D7  0087               	movwf	7	;volatile
   372                           
   373                           ;main.c: 28:     _delay((unsigned long)((40)*(16000000/4000.0)));
   374     07D8  30D0               	movlw	208
   375     07D9  00F1               	movwf	??_rotate_motor+1
   376     07DA  30C9               	movlw	201
   377     07DB  00F0               	movwf	??_rotate_motor
   378     07DC                     u57:
   379     07DC  0BF0               	decfsz	??_rotate_motor,f
   380     07DD  2FDC               	goto	u57
   381     07DE  0BF1               	decfsz	??_rotate_motor+1,f
   382     07DF  2FDC               	goto	u57
   383     07E0  2FE1               	nop2
   384                           
   385                           ;main.c: 29:     PORTC = 0b00001100;
   386     07E1  300C               	movlw	12
   387     07E2  1283               	bcf	3,5	;RP0=0, select bank0
   388     07E3  1303               	bcf	3,6	;RP1=0, select bank0
   389     07E4  0087               	movwf	7	;volatile
   390                           
   391                           ;main.c: 30:     _delay((unsigned long)((40)*(16000000/4000.0)));
   392     07E5  30D0               	movlw	208
   393     07E6  00F1               	movwf	??_rotate_motor+1
   394     07E7  30C9               	movlw	201
   395     07E8  00F0               	movwf	??_rotate_motor
   396     07E9                     u67:
   397     07E9  0BF0               	decfsz	??_rotate_motor,f
   398     07EA  2FE9               	goto	u67
   399     07EB  0BF1               	decfsz	??_rotate_motor+1,f
   400     07EC  2FE9               	goto	u67
   401     07ED  2FEE               	nop2
   402                           
   403                           ;main.c: 31:     PORTC = 0b00001000;
   404     07EE  3008               	movlw	8
   405     07EF  1283               	bcf	3,5	;RP0=0, select bank0
   406     07F0  1303               	bcf	3,6	;RP1=0, select bank0
   407     07F1  0087               	movwf	7	;volatile
   408                           
   409                           ;main.c: 32:     _delay((unsigned long)((40)*(16000000/4000.0)));
   410     07F2  30D0               	movlw	208
   411     07F3  00F1               	movwf	??_rotate_motor+1
   412     07F4  30C9               	movlw	201
   413     07F5  00F0               	movwf	??_rotate_motor
   414     07F6                     u77:
   415     07F6  0BF0               	decfsz	??_rotate_motor,f
   416     07F7  2FF6               	goto	u77
   417     07F8  0BF1               	decfsz	??_rotate_motor+1,f
   418     07F9  2FF6               	goto	u77
   419     07FA  2FFB               	nop2
   420     07FB                     l12:
   421     07FB  0008               	return
   422     07FC                     __end_of_rotate_motor:
   423                           
   424                           	psect	text2
   425     078B                     __ptext2:	
   426 ;; *************** function __init *****************
   427 ;; Defined at:
   428 ;;		line 13 in file "main.c"
   429 ;; Parameters:    Size  Location     Type
   430 ;;		None
   431 ;; Auto vars:     Size  Location     Type
   432 ;;		None
   433 ;; Return value:  Size  Location     Type
   434 ;;                  1    wreg      void 
   435 ;; Registers used:
   436 ;;		status,2
   437 ;; Tracked objects:
   438 ;;		On entry : 0/0
   439 ;;		On exit  : 0/0
   440 ;;		Unchanged: 0/0
   441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   442 ;;      Params:         0       0       0       0       0
   443 ;;      Locals:         0       0       0       0       0
   444 ;;      Temps:          0       0       0       0       0
   445 ;;      Totals:         0       0       0       0       0
   446 ;;Total ram usage:        0 bytes
   447 ;; Hardware stack levels used: 1
   448 ;; This function calls:
   449 ;;		Nothing
   450 ;; This function is called by:
   451 ;;		_main
   452 ;; This function uses a non-reentrant model
   453 ;;
   454                           
   455     078B                     __init:	
   456                           ;psect for function __init
   457                           
   458     078B                     l564:	
   459                           ;incstack = 0
   460                           ; Regs used in __init: [status,2]
   461                           
   462                           
   463                           ;main.c: 14:     TRISC = 0x00;
   464     078B  1683               	bsf	3,5	;RP0=1, select bank1
   465     078C  1303               	bcf	3,6	;RP1=0, select bank1
   466     078D  0187               	clrf	7	;volatile
   467                           
   468                           ;main.c: 15:     PORTC = 0x00;
   469     078E  1283               	bcf	3,5	;RP0=0, select bank0
   470     078F  1303               	bcf	3,6	;RP1=0, select bank0
   471     0790  0187               	clrf	7	;volatile
   472     0791                     l9:
   473     0791  0008               	return
   474     0792                     __end_of__init:
   475     007E                     btemp	set	126	;btemp
   476     007E                     wtemp0	set	126
   477                           
   478                           	psect	idloc
   479                           
   480                           ;Config register IDLOC0 @ 0x2000
   481                           ;	unspecified, using default values
   482     2000                     	org	8192
   483     2000  3FFF               	dw	16383
   484                           
   485                           ;Config register IDLOC1 @ 0x2001
   486                           ;	unspecified, using default values
   487     2001                     	org	8193
   488     2001  3FFF               	dw	16383
   489                           
   490                           ;Config register IDLOC2 @ 0x2002
   491                           ;	unspecified, using default values
   492     2002                     	org	8194
   493     2002  3FFF               	dw	16383
   494                           
   495                           ;Config register IDLOC3 @ 0x2003
   496                           ;	unspecified, using default values
   497     2003                     	org	8195
   498     2003  3FFF               	dw	16383
   499                           
   500                           	psect	config
   501                           
   502                           ;Config register CONFIG @ 0x2007
   503                           ;	Oscillator Selection bits
   504                           ;	FOSC = HS, HS oscillator
   505                           ;	Watchdog Timer Enable bit
   506                           ;	WDTE = OFF, WDT disabled
   507                           ;	Power-up Timer Enable bit
   508                           ;	PWRTE = OFF, PWRT disabled
   509                           ;	Brown-out Reset Enable bit
   510                           ;	BOREN = ON, BOR enabled
   511                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   512                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   513                           ;	Data EEPROM Memory Code Protection bit
   514                           ;	CPD = OFF, Data EEPROM code protection off
   515                           ;	Flash Program Memory Write Enable bits
   516                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   517                           ;	In-Circuit Debugger Mode bit
   518                           ;	DEBUG = 0x1, unprogrammed default
   519                           ;	Flash Program Memory Code Protection bit
   520                           ;	CP = OFF, Code protection off
   521     2007                     	org	8199
   522     2007  3F7A               	dw	16250

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      2       2
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_rotate_motor

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                              __init
                       _rotate_motor
 ---------------------------------------------------------------------------------
 (1) _rotate_motor                                         2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) __init                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   __init
   _rotate_motor

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      2       2       1       14.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Oct 18 22:06:21 2023

                      l9 0791                       l12 07FB                       u17 07A8  
                     u27 07B5                       u37 07C2                       u47 07CF  
                     u57 07DC                       u67 07E9                       u77 07F6  
                    l570 0797                      l564 078B                      l566 07A0  
                    l568 0792             _rotate_motor 07A0                     _main 0792  
                   btemp 007E                     start 0000                    ?_main 0070  
                  _PORTC 0007                    _TRISC 0087                    __init 078B  
                  status 0003                    wtemp0 007E          __initialization 07FC  
           __end_of_main 07A0                   ??_main 0072                   ?__init 0070  
__end_of__initialization 07FC           __pcstackCOMMON 0070            __end_of__init 0792  
                ??__init 0070               __pmaintext 0792                  __ptext1 07A0  
                __ptext2 078B     end_of_initialization 07FC            ?_rotate_motor 0070  
    start_initialization 07FC           ??_rotate_motor 0070                ___latbits 0002  
   __end_of_rotate_motor 07FC  
